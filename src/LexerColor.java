// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\2\0\1\6\1\0\1\5\1\0\2\7\1\10"+
    "\1\0\1\7\2\0\1\11\1\12\11\13\1\0\1\7"+
    "\1\0\1\7\3\0\1\14\1\15\1\16\1\14\1\17"+
    "\7\14\1\20\1\21\1\22\1\23\12\14\4\0\1\14"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\14\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\3\14\1\47\1\50"+
    "\1\7\1\5\1\7\7\0\1\3\73\0\1\14\7\0"+
    "\1\14\3\0\1\14\3\0\1\14\1\0\1\14\6\0"+
    "\1\14\1\0\1\14\4\0\1\51\7\0\1\14\3\0"+
    "\1\14\3\0\1\14\1\0\1\14\6\0\1\14\1\0"+
    "\1\14\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\1\2\5"+
    "\17\1\1\2\1\0\1\6\21\1\1\7\3\1\2\0"+
    "\2\6\12\1\1\10\7\1\1\11\1\1\1\0\1\6"+
    "\3\1\1\10\12\1\1\7\5\1\1\12\5\1\1\13"+
    "\11\1\1\14\1\1\1\11\5\1\1\15\33\1\1\16"+
    "\6\1\1\17\2\1\1\20\5\1\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\52\0\176\0\52\0\250"+
    "\0\322\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8"+
    "\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348"+
    "\0\u0372\0\u039c\0\u03c6\0\u03f0\0\322\0\u041a\0\u0444\0\u046e"+
    "\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\u05be"+
    "\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e"+
    "\0\u0738\0\u0762\0\u078c\0\52\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0126"+
    "\0\u0ad4\0\u0afe\0\u0762\0\u0b28\0\u0b52\0\u0b7c\0\u0126\0\u0ba6"+
    "\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6"+
    "\0\u0d20\0\u0126\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0126"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0126\0\u0eee\0\u0f18"+
    "\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u0126"+
    "\0\u1068\0\u0fc0\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164"+
    "\0\u118e\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4"+
    "\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404"+
    "\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554"+
    "\0\u157e\0\u15a8\0\u15d2\0\u0126\0\u15fc\0\u1626\0\u1650\0\u167a"+
    "\0\u16a4\0\u16ce\0\u0126\0\u16f8\0\u1722\0\u0126\0\u174c\0\u1776"+
    "\0\u17a0\0\u17ca\0\u17f4\0\u0126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\2"+
    "\1\10\1\11\1\12\10\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\13\1\22\1\23\1\13\1\24\1\25"+
    "\1\26\1\13\1\27\1\30\1\31\4\13\54\0\1\3"+
    "\63\0\36\32\10\0\1\33\1\34\52\0\2\35\50\0"+
    "\2\12\50\0\40\13\12\0\15\13\1\36\15\13\1\37"+
    "\4\13\12\0\26\13\1\40\6\13\1\41\2\13\12\0"+
    "\21\13\1\42\16\13\12\0\16\13\1\43\21\13\12\0"+
    "\32\13\1\44\5\13\12\0\22\13\1\45\6\13\1\46"+
    "\6\13\12\0\25\13\1\47\10\13\1\50\1\13\12\0"+
    "\12\13\1\51\25\13\12\0\26\13\1\52\11\13\12\0"+
    "\16\13\1\20\21\13\12\0\22\13\1\53\3\13\1\54"+
    "\11\13\12\0\16\13\1\55\21\13\12\0\22\13\1\56"+
    "\10\13\1\57\1\60\3\13\12\0\26\13\1\61\11\13"+
    "\12\0\40\32\10\62\1\63\41\62\2\34\1\64\1\34"+
    "\1\65\45\34\12\0\16\13\1\66\21\13\12\0\31\13"+
    "\1\67\6\13\12\0\26\13\1\70\11\13\12\0\33\13"+
    "\1\71\4\13\12\0\12\13\1\72\25\13\12\0\31\13"+
    "\1\73\1\13\1\74\4\13\12\0\33\13\1\75\4\13"+
    "\12\0\25\13\1\76\12\13\12\0\16\13\1\77\21\13"+
    "\12\0\33\13\1\100\4\13\12\0\30\13\1\101\7\13"+
    "\12\0\25\13\1\102\12\13\12\0\31\13\1\44\6\13"+
    "\12\0\25\13\1\103\12\13\12\0\25\13\1\104\12\13"+
    "\12\0\27\13\1\105\10\13\12\0\25\13\1\106\12\13"+
    "\12\0\31\13\1\107\6\13\12\0\31\13\1\110\6\13"+
    "\12\0\24\13\1\111\13\13\10\62\1\112\51\62\1\112"+
    "\1\113\40\62\2\0\1\64\61\0\23\13\1\114\14\13"+
    "\12\0\37\13\1\115\12\0\23\13\1\116\14\13\12\0"+
    "\16\13\1\117\21\13\12\0\31\13\1\117\6\13\12\0"+
    "\16\13\1\120\21\13\12\0\16\13\1\121\21\13\12\0"+
    "\16\13\1\110\21\13\12\0\12\13\1\122\25\13\12\0"+
    "\25\13\1\123\12\13\12\0\16\13\1\124\21\13\12\0"+
    "\34\13\1\125\3\13\12\0\36\13\1\126\1\13\12\0"+
    "\33\13\1\127\4\13\12\0\16\13\1\130\21\13\12\0"+
    "\16\13\1\131\21\13\12\0\26\13\1\132\11\13\12\0"+
    "\22\13\1\133\15\13\12\0\12\13\1\130\25\13\10\62"+
    "\1\112\1\64\40\62\12\0\12\13\1\134\25\13\12\0"+
    "\32\13\1\110\5\13\12\0\16\13\1\135\21\13\12\0"+
    "\14\13\1\136\23\13\12\0\25\13\1\137\12\13\12\0"+
    "\23\13\1\140\14\13\12\0\33\13\1\141\4\13\12\0"+
    "\31\13\1\142\6\13\12\0\22\13\1\143\15\13\12\0"+
    "\12\13\1\144\25\13\12\0\12\13\1\145\25\13\12\0"+
    "\31\13\1\146\6\13\12\0\33\13\1\147\4\13\12\0"+
    "\25\13\1\150\12\13\12\0\25\13\1\44\12\13\12\0"+
    "\12\13\1\151\25\13\12\0\21\13\1\152\16\13\12\0"+
    "\16\13\1\153\21\13\12\0\16\13\1\154\21\13\12\0"+
    "\31\13\1\155\6\13\12\0\16\13\1\156\21\13\12\0"+
    "\31\13\1\157\6\13\12\0\31\13\1\160\6\13\12\0"+
    "\22\13\1\161\15\13\12\0\20\13\1\117\17\13\12\0"+
    "\25\13\1\117\12\13\12\0\12\13\1\162\25\13\12\0"+
    "\31\13\1\163\6\13\12\0\5\13\1\164\32\13\12\0"+
    "\34\13\1\165\3\13\12\0\31\13\1\166\6\13\12\0"+
    "\6\13\1\167\31\13\12\0\31\13\1\170\6\13\12\0"+
    "\11\13\1\171\26\13\12\0\32\13\1\172\5\13\12\0"+
    "\24\13\1\173\13\13\12\0\15\13\1\152\22\13\12\0"+
    "\26\13\1\174\11\13\12\0\6\13\1\175\31\13\12\0"+
    "\22\13\1\176\15\13\12\0\3\13\1\177\1\200\2\13"+
    "\1\201\1\202\27\13\12\0\27\13\1\203\10\13\12\0"+
    "\25\13\1\204\12\13\12\0\22\13\1\205\15\13\12\0"+
    "\25\13\1\206\12\13\12\0\12\13\1\207\10\13\1\210"+
    "\14\13\12\0\23\13\1\211\14\13\12\0\16\13\1\212"+
    "\21\13\12\0\13\13\1\213\24\13\12\0\22\13\1\214"+
    "\15\13\12\0\16\13\1\215\21\13\12\0\16\13\1\216"+
    "\21\13\12\0\33\13\1\217\4\13\12\0\23\13\1\220"+
    "\14\13\12\0\12\13\1\221\25\13\12\0\12\13\1\222"+
    "\25\13\12\0\20\13\1\222\17\13\12\0\32\13\1\223"+
    "\5\13\12\0\31\13\1\224\6\13\12\0\15\13\1\225"+
    "\22\13\12\0\25\13\1\226\12\13\12\0\12\13\1\214"+
    "\25\13\12\0\22\13\1\227\15\13\12\0\25\13\1\230"+
    "\12\13\12\0\31\13\1\231\6\13\12\0\33\13\1\232"+
    "\4\13\12\0\12\13\1\233\25\13\12\0\33\13\1\234"+
    "\4\13\12\0\36\13\1\235\1\13\12\0\14\13\1\231"+
    "\23\13\12\0\26\13\1\236\11\13\12\0\37\13\1\237"+
    "\12\0\31\13\1\240\6\13\12\0\12\13\1\236\25\13"+
    "\12\0\14\13\1\241\23\13\12\0\12\13\1\242\25\13"+
    "\12\0\34\13\1\243\3\13\12\0\32\13\1\244\5\13"+
    "\12\0\23\13\1\231\14\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6174];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\1\11\23\1\1\0"+
    "\26\1\2\0\1\11\25\1\1\0\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* Ignorar */
            }
            // fall through
          case 17: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 18: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(46, 125, 50));
            }
            // fall through
          case 19: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(169, 155, 179));
            }
            // fall through
          case 20: break;
          case 5:
            { return textColor(yychar, yylength(), new Color(35, 120, 147));
            }
            // fall through
          case 21: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
            // fall through
          case 22: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(48, 63, 159));
            }
            // fall through
          case 23: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(148, 58, 173));
            }
            // fall through
          case 24: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(17, 94, 153));
            }
            // fall through
          case 25: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(198, 40, 40));
            }
            // fall through
          case 26: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(102, 41, 120));
            }
            // fall through
          case 27: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(212, 129, 6));
            }
            // fall through
          case 28: break;
          case 13:
            { return textColor(yychar, yylength(), new Color(121, 107, 255));
            }
            // fall through
          case 29: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(255, 64, 129));
            }
            // fall through
          case 30: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(239, 108, 0));
            }
            // fall through
          case 31: break;
          case 16:
            { return textColor(yychar, yylength(), new Color(150, 0, 80));
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
