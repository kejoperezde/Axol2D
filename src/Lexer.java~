// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\3\32\1\0\1\33\1\34"+
    "\1\35\1\34\2\0\2\36\1\37\1\40\1\41\12\36"+
    "\1\42\7\36\2\43\1\36\1\14\1\0\1\14\1\11"+
    "\1\44\1\0\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\36\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\14\1\12\1\14\7\0"+
    "\1\3\73\0\1\76\7\0\1\76\3\0\1\76\3\0"+
    "\1\76\1\0\1\76\6\0\1\76\1\0\1\76\4\0"+
    "\1\76\7\0\1\76\3\0\1\76\3\0\1\76\1\0"+
    "\1\76\6\0\1\76\1\0\1\76\u012b\0\2\3\326\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\3\3\1\4\1\5\1\6\1\4\1\2"+
    "\1\7\2\6\1\10\1\6\1\10\1\6\3\11\1\12"+
    "\1\13\26\14\1\5\1\1\1\12\1\5\1\15\3\16"+
    "\1\13\1\17\1\20\1\0\1\3\1\13\1\21\2\11"+
    "\1\22\26\14\1\23\33\14\1\5\1\15\1\0\1\24"+
    "\2\11\3\14\1\23\53\14\1\0\1\24\2\0\1\3"+
    "\2\11\10\14\1\23\32\14\1\25\1\0\6\14\1\23"+
    "\4\14\1\25\10\14\1\23\5\14\1\0\3\14\1\23"+
    "\16\14\2\26\2\14\1\23\14\14\1\27\4\14\1\23"+
    "\13\14\1\23\3\14\1\23\2\14\1\23\25\14\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\176\0\275\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01b9\0\u01f8\0\275\0\u0237\0\u0276\0\u01b9\0\u02b5"+
    "\0\275\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u013b\0\u013b\0\u03f0"+
    "\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u01b9\0\u01b9"+
    "\0\u0999\0\176\0\u09d8\0\u0a17\0\u0a56\0\u01b9\0\u01b9\0\u01b9"+
    "\0\u0a95\0\u0ad4\0\275\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff"+
    "\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u0c0f\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0"+
    "\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0"+
    "\0\u17df\0\u181e\0\275\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959"+
    "\0\u1998\0\u19d7\0\u1959\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa"+
    "\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea"+
    "\0\u2529\0\u24ea\0\u2529\0\u0b13\0\u2568\0\u25a7\0\u25e6\0\u2625"+
    "\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u25a7\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6"+
    "\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce"+
    "\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6"+
    "\0\u25a7\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f"+
    "\0\u2e44\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u2e44\0\u30ba\0\u30f9"+
    "\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1"+
    "\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9"+
    "\0\u346b\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2"+
    "\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b\0\275"+
    "\0\u389a\0\u38d9\0\u3918\0\u38d9\0\u3957\0\u3996\0\u39d5\0\u3a14"+
    "\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c"+
    "\0\275\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3c4b\0\u3d47\0\u3d86"+
    "\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e"+
    "\0\u3fbd\0\u3e82\0\u3ffc\0\u403b\0\u407a\0\u3ffc\0\u40b9\0\u40f8"+
    "\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1"+
    "\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9"+
    "\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4623";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\4\1\6\1\5\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\5\24\1\25\1\23\1\21"+
    "\1\26\1\27\1\30\1\31\1\30\1\32\3\30\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\30\1\42"+
    "\1\30\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\30\1\55\4\30\1\3\1\4"+
    "\1\5\1\3\1\4\1\6\1\5\1\7\1\56\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\5\24\1\25\1\23\1\21\1\26\1\27"+
    "\1\30\1\31\1\30\1\32\3\30\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\30\1\42\1\30\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\30\1\55\4\30\2\3\1\0\2\3\3\0"+
    "\1\3\2\0\1\3\7\0\10\3\3\0\41\3\101\0"+
    "\1\5\103\0\1\57\1\0\2\57\2\0\4\57\13\0"+
    "\1\57\1\60\41\0\1\3\1\10\1\61\1\3\1\10"+
    "\2\61\1\0\1\62\2\0\1\3\7\0\10\10\3\0"+
    "\41\10\7\0\1\57\1\0\2\57\2\0\4\57\13\0"+
    "\2\57\41\0\1\3\1\63\1\64\1\3\1\63\1\65"+
    "\1\64\1\0\1\3\2\0\1\3\7\0\10\63\3\0"+
    "\41\63\7\0\1\57\1\0\2\57\2\0\4\57\13\0"+
    "\1\57\1\66\50\0\1\57\1\0\2\57\2\0\1\57"+
    "\1\67\2\57\13\0\1\57\1\66\50\0\1\57\1\0"+
    "\2\57\2\0\3\57\1\70\13\0\1\57\1\66\56\0"+
    "\1\71\4\0\1\72\12\0\1\73\41\0\2\74\1\0"+
    "\2\74\3\0\1\74\2\0\1\74\5\0\1\74\1\0"+
    "\10\75\3\0\43\74\1\0\2\74\3\0\1\74\2\0"+
    "\1\74\5\0\1\74\1\0\10\23\3\0\43\74\1\0"+
    "\2\74\3\0\1\74\2\0\1\74\5\0\1\74\1\0"+
    "\5\23\1\76\2\75\3\0\41\74\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\100\3\0\41\100"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\100\3\0\24\100\1\101\14\100\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\100\3\0\23\100"+
    "\1\102\15\100\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\100\3\0\12\100\1\103\22\100\1\104"+
    "\3\100\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\100\3\0\7\100\1\105\3\100\1\106\10\100"+
    "\1\107\2\100\1\110\6\100\1\111\2\100\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\100\3\0"+
    "\7\100\1\112\6\100\1\113\2\100\1\114\2\100\1\115"+
    "\14\100\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\100\3\0\17\100\1\116\4\100\1\117\14\100"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\100\3\0\21\100\1\120\1\100\1\102\15\100\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\100"+
    "\3\0\7\100\1\121\7\100\1\122\4\100\1\123\2\100"+
    "\1\124\11\100\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\100\3\0\13\100\1\125\25\100\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\100"+
    "\3\0\14\100\1\126\5\100\1\127\1\130\15\100\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\100"+
    "\3\0\13\100\1\131\3\100\1\132\21\100\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\100\3\0"+
    "\13\100\1\133\16\100\1\134\6\100\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\100\3\0\13\100"+
    "\1\135\16\100\1\136\6\100\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\100\3\0\10\100\1\137"+
    "\30\100\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\100\3\0\21\100\1\140\2\100\1\141\2\100"+
    "\1\142\2\100\1\143\6\100\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\100\3\0\32\100\1\144"+
    "\6\100\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\100\3\0\7\100\1\145\3\100\1\146\3\100"+
    "\1\147\4\100\1\150\14\100\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\100\3\0\7\100\1\151"+
    "\1\100\1\152\1\100\1\130\2\100\1\153\1\154\11\100"+
    "\1\155\2\100\1\156\4\100\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\100\3\0\16\100\1\157"+
    "\10\100\1\160\11\100\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\100\3\0\25\100\1\126\13\100"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\100\3\0\16\100\1\161\22\100\1\3\1\10\1\61"+
    "\1\3\1\10\2\61\1\0\1\62\2\0\1\3\7\0"+
    "\10\162\3\0\6\162\1\10\31\162\1\10\1\0\2\61"+
    "\1\0\3\61\1\0\1\163\12\0\10\61\3\0\41\61"+
    "\2\3\1\0\2\3\3\0\1\3\2\0\1\62\7\0"+
    "\10\3\3\0\41\3\13\0\1\163\65\0\1\64\10\0"+
    "\1\163\63\0\15\164\1\165\61\164\2\72\1\5\2\72"+
    "\1\6\71\72\2\74\1\0\2\74\3\0\1\74\2\0"+
    "\1\74\5\0\1\74\1\0\10\74\3\0\43\74\1\0"+
    "\2\74\3\0\1\74\2\0\1\74\5\0\1\74\1\0"+
    "\10\166\3\0\43\74\1\0\2\74\3\0\1\74\2\0"+
    "\1\74\5\0\1\74\1\0\5\75\1\167\2\166\3\0"+
    "\41\74\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\77\3\0\43\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\41\170\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\170\3\0"+
    "\23\170\1\171\15\170\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\13\170\1\172\25\170"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\170\3\0\12\170\1\173\26\170\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\170\3\0\24\170"+
    "\1\174\14\170\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\170\3\0\11\170\1\175\27\170\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\170"+
    "\3\0\15\170\1\176\23\170\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\170\3\0\24\170\1\177"+
    "\14\170\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\170\3\0\13\170\1\200\25\170\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\170\3\0"+
    "\31\170\1\201\7\170\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\30\170\1\201\1\202"+
    "\7\170\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\170\3\0\7\170\1\203\31\170\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\170\3\0"+
    "\7\170\1\204\31\170\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\23\170\1\205\15\170"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\170\3\0\22\170\1\206\16\170\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\170\3\0\34\170"+
    "\1\207\4\170\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\170\3\0\30\170\1\201\10\170\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\170"+
    "\3\0\21\170\1\210\17\170\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\170\3\0\23\170\1\211"+
    "\15\170\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\170\3\0\27\170\1\173\11\170\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\170\3\0"+
    "\24\170\1\212\14\170\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\31\170\1\213\7\170"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\170\3\0\7\170\1\214\15\170\1\215\13\170\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\170"+
    "\3\0\31\170\1\173\7\170\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\170\3\0\14\170\1\216"+
    "\16\170\1\217\5\170\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\14\170\1\220\13\170"+
    "\1\216\10\170\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\170\3\0\31\170\1\221\7\170\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\170"+
    "\3\0\30\170\1\222\10\170\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\170\3\0\34\170\1\173"+
    "\4\170\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\170\3\0\21\170\1\223\17\170\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\170\3\0"+
    "\30\170\1\224\10\170\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\7\170\1\225\31\170"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\170\3\0\25\170\1\173\2\170\1\226\10\170\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\170"+
    "\3\0\17\170\1\227\21\170\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\170\3\0\30\170\1\230"+
    "\10\170\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\170\3\0\13\170\1\231\25\170\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\170\3\0"+
    "\23\170\1\232\15\170\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\7\170\1\233\21\170"+
    "\1\234\7\170\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\170\3\0\15\170\1\235\23\170\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\170"+
    "\3\0\31\170\1\236\7\170\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\170\3\0\33\170\1\237"+
    "\5\170\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\170\3\0\27\170\1\240\11\170\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\170\3\0"+
    "\24\170\1\241\14\170\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\170\3\0\37\170\1\201\1\170"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\170\3\0\7\170\1\242\31\170\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\170\3\0\17\170"+
    "\1\243\21\170\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\170\3\0\17\170\1\244\21\170\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\170"+
    "\3\0\32\170\1\245\3\170\1\173\2\170\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\170\3\0"+
    "\17\170\1\246\21\170\1\3\1\10\1\61\1\3\1\10"+
    "\2\61\1\0\1\62\2\0\1\3\5\0\1\247\1\0"+
    "\10\162\3\0\6\162\1\10\31\162\1\10\15\164\1\250"+
    "\61\164\15\251\1\252\4\251\1\253\54\251\2\74\1\0"+
    "\2\74\3\0\1\74\2\0\1\74\5\0\1\74\1\0"+
    "\10\254\3\0\43\74\1\0\2\74\3\0\1\74\2\0"+
    "\1\74\5\0\1\74\1\0\3\166\1\255\4\254\3\0"+
    "\41\74\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\256\3\0\41\256\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\256\3\0\31\256\1\257"+
    "\7\256\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\256\3\0\22\256\1\260\16\256\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\256\3\0"+
    "\21\256\1\261\17\256\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\256\3\0\20\256\1\262\20\256"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\256\3\0\17\256\1\263\21\256\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\256\3\0\21\256"+
    "\1\264\17\256\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\256\3\0\7\256\1\265\31\256\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\256"+
    "\3\0\13\256\1\266\25\256\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\256\3\0\11\256\1\267"+
    "\27\256\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\256\3\0\27\256\1\266\11\256\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\256\3\0"+
    "\30\256\1\270\10\256\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\256\3\0\30\256\1\271\10\256"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\256\3\0\13\256\1\272\25\256\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\256\3\0\16\256"+
    "\1\273\4\256\1\266\15\256\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\256\3\0\30\256\1\274"+
    "\10\256\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\256\3\0\17\256\1\275\21\256\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\256\3\0"+
    "\22\256\1\266\16\256\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\256\3\0\4\256\1\276\34\256"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\256\3\0\15\256\1\277\23\256\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\256\3\0\24\256"+
    "\1\300\14\256\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\256\3\0\31\256\1\266\7\256\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\256"+
    "\3\0\13\256\1\301\25\256\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\256\3\0\13\256\1\270"+
    "\25\256\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\256\3\0\16\256\1\302\22\256\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\256\3\0"+
    "\17\256\1\303\21\256\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\256\3\0\21\256\1\266\17\256"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\256\3\0\31\256\1\304\7\256\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\256\3\0\31\256"+
    "\1\305\4\256\1\306\2\256\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\256\3\0\17\256\1\307"+
    "\21\256\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\256\3\0\23\256\1\310\15\256\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\256\3\0"+
    "\16\256\1\266\22\256\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\256\3\0\32\256\1\277\6\256"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\256\3\0\12\256\1\311\26\256\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\256\3\0\12\256"+
    "\1\312\26\256\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\256\3\0\32\256\1\313\6\256\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\256"+
    "\3\0\16\256\1\314\22\256\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\256\3\0\7\256\1\315"+
    "\31\256\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\256\3\0\13\256\1\316\25\256\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\256\3\0"+
    "\13\256\1\317\25\256\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\256\3\0\34\256\1\266\4\256"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\256\3\0\11\256\1\265\15\256\1\314\11\256\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\256"+
    "\3\0\31\256\1\320\7\256\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\256\3\0\30\256\1\266"+
    "\10\256\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\256\3\0\13\256\1\321\25\256\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\256\3\0"+
    "\21\256\1\277\17\256\23\0\10\322\3\0\6\322\1\0"+
    "\31\322\1\0\15\251\1\252\4\251\1\5\71\251\1\252"+
    "\61\251\2\74\1\0\2\74\3\0\1\74\2\0\1\74"+
    "\5\0\1\74\1\0\5\254\3\74\3\0\41\74\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\323"+
    "\3\0\41\323\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\323\3\0\27\323\1\324\11\323\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\323"+
    "\3\0\17\323\1\325\21\323\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\2\323\1\326\5\323\3\0"+
    "\41\323\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\323\3\0\3\323\1\327\11\323\1\330\23\323"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\323\3\0\23\323\1\331\15\323\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\323\3\0\13\323"+
    "\1\332\25\323\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\323\3\0\20\323\1\331\20\323\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\323"+
    "\3\0\16\323\1\331\22\323\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\323\3\0\30\323\1\331"+
    "\10\323\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\323\3\0\31\323\1\333\7\323\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\323\3\0"+
    "\23\323\1\334\15\323\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\323\3\0\17\323\1\335\21\323"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\323\3\0\13\323\1\336\25\323\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\323\3\0\30\323"+
    "\1\337\10\323\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\323\3\0\24\323\1\340\14\323\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\323"+
    "\3\0\13\323\1\331\25\323\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\323\3\0\27\323\1\341"+
    "\11\323\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\323\3\0\21\323\1\331\17\323\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\323\3\0"+
    "\24\323\1\342\14\323\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\323\3\0\11\323\1\331\27\323"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\323\3\0\7\323\1\343\31\323\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\323\3\0\14\323"+
    "\1\344\24\323\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\323\3\0\13\323\1\345\25\323\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\323"+
    "\3\0\31\323\1\346\7\323\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\323\3\0\31\323\1\347"+
    "\7\323\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\323\3\0\24\323\1\350\14\323\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\323\3\0"+
    "\6\323\1\351\32\323\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\323\3\0\27\323\1\352\11\323"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\323\3\0\31\323\1\331\7\323\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\323\3\0\31\323"+
    "\1\353\7\323\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\323\3\0\6\323\1\354\32\323\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\323"+
    "\3\0\13\323\1\352\25\323\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\323\3\0\11\323\1\337"+
    "\27\323\10\0\1\355\12\0\10\322\3\0\6\322\1\0"+
    "\31\322\1\0\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\356\3\0\41\356\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\356\3\0\24\356"+
    "\1\357\14\356\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\356\3\0\13\356\1\360\25\356\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\356"+
    "\3\0\2\356\1\361\36\356\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\356\3\0\21\356\1\362"+
    "\17\356\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\356\3\0\27\356\1\363\11\356\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\356\3\0"+
    "\7\356\1\364\31\356\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\356\3\0\7\356\1\365\31\356"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\356\3\0\30\356\1\366\10\356\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\356\3\0\21\356"+
    "\1\367\17\356\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\356\3\0\16\356\1\361\22\356\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\356"+
    "\3\0\30\356\1\370\10\356\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\356\3\0\31\356\1\361"+
    "\7\356\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\356\3\0\12\356\1\361\26\356\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\356\3\0"+
    "\11\356\1\371\27\356\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\356\3\0\24\356\1\372\14\356"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\356\3\0\27\356\1\361\11\356\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\356\3\0\17\356"+
    "\1\373\21\356\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\356\3\0\6\356\1\374\32\356\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\356"+
    "\3\0\22\356\1\361\16\356\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\356\3\0\10\356\1\375"+
    "\11\356\1\376\6\356\1\377\7\356\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\356\3\0\23\356"+
    "\1\361\15\356\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\356\3\0\13\356\1\361\25\356\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\356"+
    "\3\0\10\356\1\375\30\356\2\0\3\u0100\1\u0101\71\0"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0102\3\0\41\u0102\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u0102\3\0\21\u0102\1\u0103\17\u0102"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0102\3\0\30\u0102\1\u0104\10\u0102\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\u0102\3\0\13\u0102"+
    "\1\u0105\25\u0102\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\u0102\3\0\24\u0102\1\u0106\14\u0102\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u0102"+
    "\3\0\23\u0102\1\u0104\15\u0102\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u0102\3\0\23\u0102\1\u0107"+
    "\15\u0102\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\u0102\3\0\17\u0102\1\u0108\21\u0102\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\u0102\3\0"+
    "\13\u0102\1\u0104\25\u0102\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u0102\3\0\17\u0102\1\u0109\21\u0102"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0102\3\0\21\u0102\1\u010a\17\u0102\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\u0102\3\0\27\u0102"+
    "\1\u010b\11\u0102\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\u0102\3\0\24\u0102\1\u010c\14\u0102\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u0102"+
    "\3\0\11\u0102\1\u010d\27\u0102\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u0102\3\0\17\u0102\1\u010e"+
    "\21\u0102\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\u0102\3\0\15\u0102\1\u0104\7\u0102\1\u010f\13\u0102"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0102\3\0\13\u0102\1\u0110\25\u0102\2\0\1\u0111\74\0"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0112\3\0\41\u0112\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u0112\3\0\21\u0112\1\u0113\17\u0112"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0112\3\0\22\u0112\1\u0114\16\u0112\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\u0112\3\0\32\u0112"+
    "\1\u0115\6\u0112\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\u0112\3\0\31\u0112\1\u0116\7\u0112\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u0112"+
    "\3\0\24\u0112\1\u0117\14\u0112\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u0112\3\0\31\u0112\1\u0118"+
    "\7\u0112\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\u0112\3\0\13\u0112\1\u0119\25\u0112\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\u0112\3\0"+
    "\22\u0112\1\u0116\16\u0112\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u0112\3\0\23\u0112\1\u011a\15\u0112"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0112\3\0\24\u0112\1\u011b\14\u0112\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\u0112\3\0\23\u0112"+
    "\1\u0116\15\u0112\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\3\u0112\1\u0116\4\u0112\3\0\41\u0112\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u0112"+
    "\3\0\11\u0112\1\u0116\27\u0112\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u011c\3\0\41\u011c\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u011c"+
    "\3\0\13\u011c\1\u011d\25\u011c\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u011c\3\0\13\u011c\1\u011e"+
    "\25\u011c\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\u011c\3\0\23\u011c\1\u011f\15\u011c\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\u011c\3\0"+
    "\23\u011c\1\u0120\15\u011c\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u011c\3\0\17\u011c\1\u0121\21\u011c"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u011c\3\0\30\u011c\1\u0122\10\u011c\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\u011c\3\0\5\u011c"+
    "\1\u0122\33\u011c\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\u011c\3\0\23\u011c\1\u0122\15\u011c\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u0123"+
    "\3\0\41\u0123\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\u0123\3\0\27\u0123\1\u0124\11\u0123\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u0123"+
    "\3\0\23\u0123\1\u0125\15\u0123\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u0123\3\0\12\u0123\1\u0126"+
    "\26\u0123\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\u0123\3\0\30\u0123\1\u0126\10\u0123\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\u0123\3\0"+
    "\24\u0123\1\u0127\14\u0123\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u0128\3\0\41\u0128\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\u0128\3\0"+
    "\30\u0128\1\u0129\10\u0128\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u0128\3\0\31\u0128\1\u0129\7\u0128"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0128\3\0\23\u0128\1\u0129\15\u0128\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\u012a\3\0\41\u012a"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u012b\3\0\41\u012b\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u012c\3\0\41\u012c\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\u012d\3\0"+
    "\41\u012d\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\u012e\3\0\41\u012e\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u012f\3\0\41\u012f\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u0130"+
    "\3\0\41\u0130\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\u0131\3\0\41\u0131\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\u0132\3\0\41\u0132"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u0133\3\0\41\u0133\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u0134\3\0\41\u0134\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\u0135\3\0"+
    "\41\u0135\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\u0136\3\0\41\u0136\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u0137\3\0\41\u0137\2\77"+
    "\1\0\2\77\3\0\1\77\2\0\1\77\7\0\10\u0138"+
    "\3\0\41\u0138\2\77\1\0\2\77\3\0\1\77\2\0"+
    "\1\77\7\0\10\u0139\3\0\41\u0139\2\77\1\0\2\77"+
    "\3\0\1\77\2\0\1\77\7\0\10\u013a\3\0\41\u013a"+
    "\2\77\1\0\2\77\3\0\1\77\2\0\1\77\7\0"+
    "\10\u013b\3\0\41\u013b\2\77\1\0\2\77\3\0\1\77"+
    "\2\0\1\77\7\0\10\u013c\3\0\41\u013c\2\77\1\0"+
    "\2\77\3\0\1\77\2\0\1\77\7\0\10\u013d\3\0"+
    "\41\u013d\2\77\1\0\2\77\3\0\1\77\2\0\1\77"+
    "\7\0\10\u013e\3\0\41\u013e\2\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\7\0\10\u013f\3\0\41\u013f";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18018];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\1\1\11\6\1\1\11\4\1\1\11\47\1\1\0"+
    "\1\1\1\11\67\1\1\11\1\0\62\1\1\0\1\1"+
    "\2\0\47\1\1\0\32\1\1\0\22\1\1\11\20\1"+
    "\1\11\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEXICO_5", yyline, yycolumn);
            }
            // fall through
          case 25: break;
          case 2:
            { return token(yytext(), "ERROR_LEXICO_1", yyline, yycolumn);
            }
            // fall through
          case 26: break;
          case 3:
            { /*Ignorar*/
            }
            // fall through
          case 27: break;
          case 4:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 28: break;
          case 5:
            { return token(yytext(), "ERROR_LEXICO_7", yyline, yycolumn);
            }
            // fall through
          case 29: break;
          case 6:
            { return token(yytext(), "OP_ARITMETICO", yyline, yycolumn);
            }
            // fall through
          case 30: break;
          case 7:
            { return token(yytext(), "DELIMITADOR", yyline, yycolumn);
            }
            // fall through
          case 31: break;
          case 8:
            { return token(yytext(), "SEPARADOR", yyline, yycolumn);
            }
            // fall through
          case 32: break;
          case 9:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 33: break;
          case 10:
            { return token(yytext(), "OP_COMPARA", yyline, yycolumn);
            }
            // fall through
          case 34: break;
          case 11:
            { return token (yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 35: break;
          case 12:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 36: break;
          case 13:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 37: break;
          case 14:
            { return token(yytext(), "ERROR_LEXICO_6", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 15:
            { return token(yytext(), "OP_INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 16:
            { return token(yytext(), "OP_DECREMENTO", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 17:
            { return token(yytext(), "ERROR_LEXICO_3", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 18:
            { return token(yytext(), "ERROR_LEXICO_4", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 19:
            { return token(yytext(), "PALABRA_RES", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 20:
            { return token(yytext(), "ERROR_LEXICO_8", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 21:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 22:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return token(yytext(), "ARCHIVO", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 23:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return token(yytext(), "ARCHIVO", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 24:
            { return token(yytext(), "ERROR_LEXICO_2", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
