// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\3\30\1\0\1\31\1\32"+
    "\1\33\1\32\2\0\2\34\1\35\1\36\1\37\12\34"+
    "\1\40\7\34\2\41\1\34\1\12\1\0\1\12\1\7"+
    "\1\42\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\34\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\12\1\10\1\12\62\0"+
    "\1\74\20\0\1\34\7\0\1\34\3\0\1\34\3\0"+
    "\1\34\1\0\1\34\6\0\1\34\1\0\1\34\4\0"+
    "\1\34\7\0\1\34\3\0\1\34\3\0\1\34\1\0"+
    "\1\34\6\0\1\34\1\0\1\34\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\5\1\6\1\4\1\2"+
    "\1\7\2\6\1\10\1\6\1\10\1\6\3\11\1\12"+
    "\1\13\26\14\1\2\1\1\1\12\2\5\1\0\3\15"+
    "\1\13\1\16\1\17\1\0\1\3\1\13\1\20\1\21"+
    "\2\11\1\22\26\14\1\23\33\14\1\24\2\25\3\0"+
    "\2\11\3\14\1\23\53\14\2\0\1\3\3\11\10\14"+
    "\1\23\32\14\1\26\1\27\1\11\6\14\1\23\4\14"+
    "\1\26\10\14\1\23\10\14\1\23\20\14\1\23\20\14"+
    "\1\23\13\14\1\23\3\14\1\23\2\14\1\23\25\14"+
    "\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\172\0\267\0\364\0\u0131\0\u016e"+
    "\0\u016e\0\u01ab\0\172\0\u01e8\0\u0225\0\u016e\0\u0262\0\172"+
    "\0\u029f\0\u02dc\0\u0319\0\u0356\0\364\0\364\0\u0393\0\u03d0"+
    "\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8"+
    "\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u016e\0\u016e\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u016e\0\u016e\0\u016e"+
    "\0\u0a7c\0\u0ab9\0\172\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u0c27\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535"+
    "\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\172\0\75\0\172\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u1905\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u1811\0\u2475\0\u24b2\0\u24ef\0\u252c"+
    "\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u252c"+
    "\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf"+
    "\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7"+
    "\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f"+
    "\0\u2ccc\0\u2d09\0\u252c\0\u0b33\0\u0b33\0\u2d46\0\u2d83\0\u2dc0"+
    "\0\u2dfd\0\u2e3a\0\u2e77\0\u2d46\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b"+
    "\0\u2d46\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u32fe\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9"+
    "\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691"+
    "\0\u36ce\0\u370b\0\u3748\0\u370b\0\u3785\0\u37c2\0\u37ff\0\u383c"+
    "\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24"+
    "\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3a61\0\u3b55\0\u3b92\0\u3bcf"+
    "\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7"+
    "\0\u3c86\0\u3df4\0\u3e31\0\u3e6e\0\u3df4\0\u3eab\0\u3ee8\0\u3ee8"+
    "\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0"+
    "\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8"+
    "\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u43e9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\5\23\1\24\1\22\1\20\1\25\1\26"+
    "\1\27\1\30\1\27\1\31\3\27\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\27\1\41\1\27\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\27\1\54\3\27\1\55\2\2\4\0\1\2"+
    "\2\0\1\2\7\0\10\2\3\0\41\2\77\0\1\4"+
    "\77\0\1\56\1\0\2\56\2\0\4\56\13\0\1\56"+
    "\1\57\41\0\1\2\1\60\3\61\1\0\1\2\2\0"+
    "\1\2\3\0\3\62\1\0\10\60\3\0\40\60\1\2"+
    "\5\0\1\56\1\0\2\56\2\0\4\56\13\0\2\56"+
    "\41\0\1\2\1\63\1\64\1\65\1\64\1\0\1\2"+
    "\2\0\1\2\7\0\10\63\3\0\40\63\1\2\5\0"+
    "\1\56\1\0\2\56\2\0\4\56\13\0\1\56\1\66"+
    "\46\0\1\56\1\0\2\56\2\0\1\56\1\67\2\56"+
    "\13\0\1\56\1\66\46\0\1\56\1\0\2\56\2\0"+
    "\3\56\1\70\13\0\1\56\1\66\54\0\1\71\4\0"+
    "\1\72\12\0\1\73\40\0\1\74\2\75\4\0\1\75"+
    "\2\0\1\75\5\0\1\75\1\0\10\76\3\0\43\75"+
    "\4\0\1\75\2\0\1\75\5\0\1\75\1\0\10\22"+
    "\3\0\43\75\4\0\1\75\2\0\1\75\5\0\1\75"+
    "\1\0\5\22\1\77\2\76\3\0\41\75\2\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\101\3\0\40\101\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\101\3\0\24\101"+
    "\1\102\13\101\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\101\3\0\23\101\1\103\14\101\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\101\3\0\12\101\1\104\22\101"+
    "\1\105\2\101\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\101\3\0\7\101\1\106\3\101\1\107\10\101\1\110"+
    "\2\101\1\111\6\101\1\112\1\101\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\101\3\0\7\101\1\113\6\101"+
    "\1\114\2\101\1\115\2\101\1\116\13\101\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\101\3\0\17\101\1\117"+
    "\4\101\1\120\13\101\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\101\3\0\21\101\1\121\1\101\1\103\14\101"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\101\3\0"+
    "\7\101\1\122\7\101\1\123\4\101\1\124\2\101\1\125"+
    "\10\101\3\100\4\0\1\100\2\0\1\100\7\0\10\101"+
    "\3\0\13\101\1\126\24\101\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\101\3\0\14\101\1\127\5\101\1\130"+
    "\1\131\14\101\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\101\3\0\13\101\1\132\3\101\1\133\20\101\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\101\3\0\13\101"+
    "\1\134\16\101\1\135\5\101\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\101\3\0\13\101\1\136\16\101\1\137"+
    "\5\101\3\100\4\0\1\100\2\0\1\100\7\0\10\101"+
    "\3\0\10\101\1\140\27\101\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\101\3\0\21\101\1\141\2\101\1\142"+
    "\2\101\1\143\2\101\1\144\5\101\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\101\3\0\32\101\1\145\5\101"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\101\3\0"+
    "\7\101\1\146\3\101\1\147\3\101\1\150\4\101\1\151"+
    "\13\101\3\100\4\0\1\100\2\0\1\100\7\0\10\101"+
    "\3\0\7\101\1\152\1\101\1\153\1\101\1\131\2\101"+
    "\1\154\1\155\11\101\1\156\2\101\1\157\3\101\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\101\3\0\16\101"+
    "\1\160\10\101\1\161\10\101\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\101\3\0\25\101\1\127\12\101\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\101\3\0\16\101"+
    "\1\162\21\101\1\100\2\2\4\0\1\2\2\0\1\2"+
    "\6\0\1\163\10\2\3\0\42\2\1\60\3\61\1\0"+
    "\1\164\2\0\1\2\3\0\3\62\1\0\10\60\3\0"+
    "\40\60\1\2\1\0\4\61\1\0\1\165\6\0\3\62"+
    "\1\0\10\61\3\0\40\61\2\0\4\62\1\0\1\165"+
    "\6\0\3\62\1\0\10\62\3\0\40\62\1\0\2\2"+
    "\4\0\1\2\2\0\1\164\7\0\10\2\3\0\41\2"+
    "\11\0\1\165\65\0\1\64\6\0\1\165\76\0\1\166"+
    "\61\0\2\72\1\4\1\5\71\72\13\167\1\0\60\167"+
    "\1\170\2\75\4\0\1\75\2\0\1\75\5\0\1\75"+
    "\1\0\10\75\3\0\43\75\4\0\1\75\2\0\1\75"+
    "\5\0\1\75\1\0\10\171\3\0\43\75\4\0\1\75"+
    "\2\0\1\75\5\0\1\75\1\0\5\76\1\172\2\171"+
    "\3\0\41\75\2\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\100\3\0\43\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\173\3\0\40\173\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\173\3\0\23\173\1\174\14\173\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\173\3\0\13\173\1\175"+
    "\24\173\3\100\4\0\1\100\2\0\1\100\7\0\10\173"+
    "\3\0\12\173\1\176\25\173\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\173\3\0\24\173\1\177\13\173\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\173\3\0\11\173"+
    "\1\200\26\173\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\173\3\0\15\173\1\201\22\173\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\173\3\0\24\173\1\202\13\173"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\173\3\0"+
    "\13\173\1\203\24\173\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\173\3\0\31\173\1\204\6\173\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\173\3\0\30\173\1\204"+
    "\1\205\6\173\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\173\3\0\7\173\1\206\30\173\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\173\3\0\7\173\1\207\30\173"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\173\3\0"+
    "\23\173\1\210\14\173\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\173\3\0\22\173\1\211\15\173\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\173\3\0\34\173\1\212"+
    "\3\173\3\100\4\0\1\100\2\0\1\100\7\0\10\173"+
    "\3\0\30\173\1\204\7\173\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\173\3\0\21\173\1\213\16\173\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\173\3\0\23\173"+
    "\1\214\14\173\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\173\3\0\27\173\1\176\10\173\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\173\3\0\24\173\1\215\13\173"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\173\3\0"+
    "\31\173\1\216\6\173\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\173\3\0\7\173\1\217\15\173\1\220\12\173"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\173\3\0"+
    "\31\173\1\176\6\173\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\173\3\0\14\173\1\221\16\173\1\222\4\173"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\173\3\0"+
    "\14\173\1\223\13\173\1\221\7\173\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\173\3\0\31\173\1\224\6\173"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\173\3\0"+
    "\30\173\1\225\7\173\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\173\3\0\34\173\1\176\3\173\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\173\3\0\21\173\1\226"+
    "\16\173\3\100\4\0\1\100\2\0\1\100\7\0\10\173"+
    "\3\0\30\173\1\227\7\173\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\173\3\0\7\173\1\230\30\173\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\173\3\0\25\173"+
    "\1\176\2\173\1\231\7\173\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\173\3\0\17\173\1\232\20\173\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\173\3\0\30\173"+
    "\1\233\7\173\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\173\3\0\13\173\1\234\24\173\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\173\3\0\23\173\1\235\14\173"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\173\3\0"+
    "\7\173\1\236\21\173\1\237\6\173\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\173\3\0\15\173\1\240\22\173"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\173\3\0"+
    "\31\173\1\241\6\173\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\173\3\0\33\173\1\242\4\173\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\173\3\0\27\173\1\243"+
    "\10\173\3\100\4\0\1\100\2\0\1\100\7\0\10\173"+
    "\3\0\24\173\1\244\13\173\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\173\3\0\37\173\1\204\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\173\3\0\7\173\1\245"+
    "\30\173\3\100\4\0\1\100\2\0\1\100\7\0\10\173"+
    "\3\0\17\173\1\246\20\173\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\173\3\0\17\173\1\247\20\173\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\173\3\0\32\173"+
    "\1\250\3\173\1\176\1\173\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\173\3\0\17\173\1\251\20\173\1\100"+
    "\13\166\1\252\61\166\74\167\1\253\20\167\1\254\53\167"+
    "\1\253\2\75\4\0\1\75\2\0\1\75\5\0\1\75"+
    "\1\0\10\255\3\0\43\75\4\0\1\75\2\0\1\75"+
    "\5\0\1\75\1\0\3\256\1\257\4\255\3\0\41\75"+
    "\2\100\4\0\1\100\2\0\1\100\7\0\10\260\3\0"+
    "\40\260\3\100\4\0\1\100\2\0\1\100\7\0\10\260"+
    "\3\0\31\260\1\261\6\260\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\260\3\0\22\260\1\262\15\260\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\260\3\0\21\260"+
    "\1\263\16\260\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\260\3\0\20\260\1\264\17\260\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\260\3\0\17\260\1\265\20\260"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\260\3\0"+
    "\21\260\1\266\16\260\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\260\3\0\7\260\1\267\30\260\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\260\3\0\13\260\1\270"+
    "\24\260\3\100\4\0\1\100\2\0\1\100\7\0\10\260"+
    "\3\0\11\260\1\271\26\260\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\260\3\0\27\260\1\270\10\260\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\260\3\0\30\260"+
    "\1\272\7\260\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\260\3\0\30\260\1\273\7\260\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\260\3\0\13\260\1\274\24\260"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\260\3\0"+
    "\16\260\1\275\4\260\1\270\14\260\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\260\3\0\30\260\1\276\7\260"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\260\3\0"+
    "\17\260\1\277\20\260\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\260\3\0\22\260\1\270\15\260\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\260\3\0\4\260\1\300"+
    "\33\260\3\100\4\0\1\100\2\0\1\100\7\0\10\260"+
    "\3\0\15\260\1\301\22\260\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\260\3\0\24\260\1\302\13\260\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\260\3\0\31\260"+
    "\1\270\6\260\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\260\3\0\13\260\1\303\24\260\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\260\3\0\13\260\1\272\24\260"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\260\3\0"+
    "\16\260\1\304\21\260\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\260\3\0\17\260\1\305\20\260\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\260\3\0\21\260\1\270"+
    "\16\260\3\100\4\0\1\100\2\0\1\100\7\0\10\260"+
    "\3\0\31\260\1\306\6\260\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\260\3\0\31\260\1\307\4\260\1\310"+
    "\1\260\3\100\4\0\1\100\2\0\1\100\7\0\10\260"+
    "\3\0\17\260\1\311\20\260\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\260\3\0\23\260\1\312\14\260\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\260\3\0\16\260"+
    "\1\270\21\260\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\260\3\0\32\260\1\301\5\260\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\260\3\0\12\260\1\313\25\260"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\260\3\0"+
    "\12\260\1\314\25\260\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\260\3\0\32\260\1\315\5\260\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\260\3\0\16\260\1\316"+
    "\21\260\3\100\4\0\1\100\2\0\1\100\7\0\10\260"+
    "\3\0\7\260\1\317\30\260\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\260\3\0\13\260\1\320\24\260\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\260\3\0\13\260"+
    "\1\321\24\260\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\260\3\0\34\260\1\270\3\260\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\260\3\0\11\260\1\267\15\260"+
    "\1\316\10\260\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\260\3\0\31\260\1\322\6\260\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\260\3\0\30\260\1\270\7\260"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\260\3\0"+
    "\13\260\1\323\24\260\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\260\3\0\21\260\1\301\16\260\1\100\13\166"+
    "\1\252\4\166\1\4\54\166\20\167\1\4\53\167\1\253"+
    "\2\75\4\0\1\75\2\0\1\75\5\0\1\75\1\0"+
    "\10\324\3\0\43\75\4\0\1\75\2\0\1\75\5\0"+
    "\1\75\1\0\10\325\3\0\43\75\4\0\1\75\2\0"+
    "\1\75\5\0\1\75\1\0\5\255\3\324\3\0\41\75"+
    "\2\100\4\0\1\100\2\0\1\100\7\0\10\326\3\0"+
    "\40\326\3\100\4\0\1\100\2\0\1\100\7\0\10\326"+
    "\3\0\27\326\1\327\10\326\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\326\3\0\17\326\1\330\20\326\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\2\326\1\331\5\326"+
    "\3\0\40\326\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\326\3\0\3\326\1\332\11\326\1\333\22\326\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\326\3\0\23\326"+
    "\1\334\14\326\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\326\3\0\13\326\1\335\24\326\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\326\3\0\20\326\1\334\17\326"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\326\3\0"+
    "\16\326\1\334\21\326\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\326\3\0\30\326\1\334\7\326\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\326\3\0\31\326\1\336"+
    "\6\326\3\100\4\0\1\100\2\0\1\100\7\0\10\326"+
    "\3\0\23\326\1\337\14\326\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\326\3\0\17\326\1\340\20\326\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\326\3\0\13\326"+
    "\1\341\24\326\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\326\3\0\30\326\1\342\7\326\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\326\3\0\24\326\1\343\13\326"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\326\3\0"+
    "\13\326\1\334\24\326\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\326\3\0\27\326\1\344\10\326\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\326\3\0\21\326\1\334"+
    "\16\326\3\100\4\0\1\100\2\0\1\100\7\0\10\326"+
    "\3\0\24\326\1\345\13\326\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\326\3\0\11\326\1\334\26\326\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\326\3\0\7\326"+
    "\1\346\30\326\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\326\3\0\14\326\1\347\23\326\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\326\3\0\13\326\1\350\24\326"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\326\3\0"+
    "\31\326\1\351\6\326\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\326\3\0\31\326\1\352\6\326\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\326\3\0\24\326\1\353"+
    "\13\326\3\100\4\0\1\100\2\0\1\100\7\0\10\326"+
    "\3\0\6\326\1\354\31\326\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\326\3\0\27\326\1\355\10\326\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\326\3\0\31\326"+
    "\1\334\6\326\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\326\3\0\31\326\1\356\6\326\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\326\3\0\6\326\1\357\31\326"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\326\3\0"+
    "\13\326\1\355\24\326\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\326\3\0\11\326\1\342\26\326\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\360\3\0\40\360\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\360\3\0\24\360"+
    "\1\361\13\360\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\360\3\0\13\360\1\362\24\360\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\360\3\0\2\360\1\363\35\360"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\360\3\0"+
    "\21\360\1\364\16\360\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\360\3\0\27\360\1\365\10\360\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\360\3\0\7\360\1\366"+
    "\30\360\3\100\4\0\1\100\2\0\1\100\7\0\10\360"+
    "\3\0\7\360\1\367\30\360\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\360\3\0\30\360\1\370\7\360\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\360\3\0\21\360"+
    "\1\371\16\360\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\360\3\0\16\360\1\363\21\360\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\360\3\0\30\360\1\372\7\360"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\360\3\0"+
    "\31\360\1\363\6\360\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\360\3\0\12\360\1\363\25\360\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\360\3\0\11\360\1\373"+
    "\26\360\3\100\4\0\1\100\2\0\1\100\7\0\10\360"+
    "\3\0\24\360\1\374\13\360\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\360\3\0\27\360\1\363\10\360\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\360\3\0\17\360"+
    "\1\375\20\360\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\360\3\0\6\360\1\376\31\360\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\360\3\0\22\360\1\363\15\360"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\360\3\0"+
    "\10\360\1\377\11\360\1\u0100\6\360\1\u0101\6\360\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\360\3\0\23\360"+
    "\1\363\14\360\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\360\3\0\13\360\1\363\24\360\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\360\3\0\10\360\1\377\27\360"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0102\3\0"+
    "\40\u0102\3\100\4\0\1\100\2\0\1\100\7\0\10\u0102"+
    "\3\0\21\u0102\1\u0103\16\u0102\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u0102\3\0\30\u0102\1\u0104\7\u0102\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\u0102\3\0\13\u0102"+
    "\1\u0105\24\u0102\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\u0102\3\0\24\u0102\1\u0106\13\u0102\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\u0102\3\0\23\u0102\1\u0104\14\u0102"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0102\3\0"+
    "\23\u0102\1\u0107\14\u0102\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u0102\3\0\17\u0102\1\u0108\20\u0102\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\u0102\3\0\13\u0102\1\u0104"+
    "\24\u0102\3\100\4\0\1\100\2\0\1\100\7\0\10\u0102"+
    "\3\0\17\u0102\1\u0109\20\u0102\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u0102\3\0\21\u0102\1\u010a\16\u0102\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\u0102\3\0\27\u0102"+
    "\1\u010b\10\u0102\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\u0102\3\0\24\u0102\1\u010c\13\u0102\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\u0102\3\0\11\u0102\1\u010d\26\u0102"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0102\3\0"+
    "\17\u0102\1\u010e\20\u0102\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u0102\3\0\15\u0102\1\u0104\7\u0102\1\u010f\12\u0102"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0102\3\0"+
    "\13\u0102\1\u0110\24\u0102\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u0111\3\0\40\u0111\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u0111\3\0\21\u0111\1\u0112\16\u0111\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\u0111\3\0\22\u0111"+
    "\1\u0113\15\u0111\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\u0111\3\0\32\u0111\1\u0114\5\u0111\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\u0111\3\0\31\u0111\1\u0115\6\u0111"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0111\3\0"+
    "\24\u0111\1\u0116\13\u0111\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u0111\3\0\31\u0111\1\u0117\6\u0111\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\u0111\3\0\13\u0111\1\u0118"+
    "\24\u0111\3\100\4\0\1\100\2\0\1\100\7\0\10\u0111"+
    "\3\0\22\u0111\1\u0115\15\u0111\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u0111\3\0\23\u0111\1\u0119\14\u0111\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\u0111\3\0\24\u0111"+
    "\1\u011a\13\u0111\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\u0111\3\0\23\u0111\1\u0115\14\u0111\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\3\u0111\1\u0115\4\u0111\3\0\40\u0111"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0111\3\0"+
    "\11\u0111\1\u0115\26\u0111\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u011b\3\0\40\u011b\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u011b\3\0\13\u011b\1\u011c\24\u011b\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\u011b\3\0\13\u011b"+
    "\1\u011d\24\u011b\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\u011b\3\0\23\u011b\1\u011e\14\u011b\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\u011b\3\0\23\u011b\1\u011f\14\u011b"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u011b\3\0"+
    "\17\u011b\1\u0120\20\u011b\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u011b\3\0\30\u011b\1\u0121\7\u011b\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\u011b\3\0\5\u011b\1\u0121"+
    "\32\u011b\3\100\4\0\1\100\2\0\1\100\7\0\10\u011b"+
    "\3\0\23\u011b\1\u0121\14\u011b\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u0122\3\0\40\u0122\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\u0122\3\0\27\u0122\1\u0123\10\u0122"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0122\3\0"+
    "\23\u0122\1\u0124\14\u0122\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u0122\3\0\12\u0122\1\u0125\25\u0122\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\u0122\3\0\30\u0122\1\u0125"+
    "\7\u0122\3\100\4\0\1\100\2\0\1\100\7\0\10\u0122"+
    "\3\0\24\u0122\1\u0126\13\u0122\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u0127\3\0\40\u0127\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\u0127\3\0\30\u0127\1\u0128\7\u0127"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0127\3\0"+
    "\31\u0127\1\u0128\6\u0127\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u0127\3\0\23\u0127\1\u0128\14\u0127\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\u0129\3\0\40\u0129\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\u012a\3\0\40\u012a"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u012b\3\0"+
    "\40\u012b\3\100\4\0\1\100\2\0\1\100\7\0\10\u012c"+
    "\3\0\40\u012c\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\u012d\3\0\40\u012d\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u012e\3\0\40\u012e\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u012f\3\0\40\u012f\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\u0130\3\0\40\u0130\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\u0131\3\0\40\u0131\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\u0132\3\0\40\u0132"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u0133\3\0"+
    "\40\u0133\3\100\4\0\1\100\2\0\1\100\7\0\10\u0134"+
    "\3\0\40\u0134\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\u0135\3\0\40\u0135\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u0136\3\0\40\u0136\3\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\u0137\3\0\40\u0137\3\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\u0138\3\0\40\u0138\3\100\4\0"+
    "\1\100\2\0\1\100\7\0\10\u0139\3\0\40\u0139\3\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\u013a\3\0\40\u013a"+
    "\3\100\4\0\1\100\2\0\1\100\7\0\10\u013b\3\0"+
    "\40\u013b\3\100\4\0\1\100\2\0\1\100\7\0\10\u013c"+
    "\3\0\40\u013c\3\100\4\0\1\100\2\0\1\100\7\0"+
    "\10\u013d\3\0\40\u013d\3\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\u013e\3\0\40\u013e\1\100";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17446];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\6\1\1\11\4\1\1\11\41\1\1\0"+
    "\6\1\1\0\1\1\1\11\67\1\1\11\1\1\1\11"+
    "\3\0\61\1\2\0\223\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEXICO_5", yyline, yycolumn);
            }
            // fall through
          case 25: break;
          case 2:
            { return token(yytext(), "ERROR_LEXICO_1", yyline, yycolumn);
            }
            // fall through
          case 26: break;
          case 3:
            { /*Ignorar*/
            }
            // fall through
          case 27: break;
          case 4:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 28: break;
          case 5:
            { return token(yytext(), "ERROR_LEXICO_7", yyline, yycolumn);
            }
            // fall through
          case 29: break;
          case 6:
            { return token(yytext(), "OP_ARITMETICO", yyline, yycolumn);
            }
            // fall through
          case 30: break;
          case 7:
            { return token(yytext(), "DELIMITADOR", yyline, yycolumn);
            }
            // fall through
          case 31: break;
          case 8:
            { return token(yytext(), "SEPARADOR", yyline, yycolumn);
            }
            // fall through
          case 32: break;
          case 9:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 33: break;
          case 10:
            { return token(yytext(), "OP_COMPARA", yyline, yycolumn);
            }
            // fall through
          case 34: break;
          case 11:
            { return token (yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 35: break;
          case 12:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 36: break;
          case 13:
            { return token(yytext(), "ERROR_LEXICO_6", yyline, yycolumn);
            }
            // fall through
          case 37: break;
          case 14:
            { return token(yytext(), "OP_INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 15:
            { return token(yytext(), "OP_DECREMENTO", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 16:
            { return token(yytext(), "ERROR_LEXICO_8", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 17:
            { return token(yytext(), "ERROR_LEXICO_3", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 18:
            { return token(yytext(), "ERROR_LEXICO_4", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 19:
            { return token(yytext(), "PALABRA_RES", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 20:
            { return token(yytext(), "ERROR_LEXICO_9", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 21:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 22:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 23:
            { return token(yytext(), "ERROR_LEXICO_10", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 24:
            { return token(yytext(), "ERROR_LEXICO_2", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
