// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\0\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\3\30\1\0\1\31"+
    "\1\32\1\33\1\32\2\0\2\34\1\35\1\36\1\37"+
    "\12\34\1\40\7\34\2\41\1\34\1\42\1\0\1\42"+
    "\1\7\1\43\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\34\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\10\1\76"+
    "\103\0\1\34\7\0\1\34\3\0\1\34\3\0\1\34"+
    "\1\0\1\34\6\0\1\34\1\0\1\34\4\0\1\34"+
    "\7\0\1\34\3\0\1\34\3\0\1\34\1\0\1\34"+
    "\6\0\1\34\1\0\1\34\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\5\1\6\1\4\1\2"+
    "\1\7\1\10\2\6\1\11\2\6\6\12\1\13\1\14"+
    "\1\15\26\16\1\17\1\20\1\1\1\14\1\5\1\21"+
    "\3\22\1\15\1\23\1\24\1\0\1\3\1\15\1\25"+
    "\5\12\1\26\27\16\1\27\33\16\1\30\1\16\1\21"+
    "\2\31\1\0\1\32\1\12\3\33\3\16\1\34\21\16"+
    "\1\35\4\16\1\36\6\16\1\37\24\16\1\40\1\16"+
    "\1\32\2\0\1\3\2\33\10\16\1\36\1\41\5\16"+
    "\1\30\1\27\3\16\1\37\7\16\1\42\5\16\1\34"+
    "\13\16\1\43\7\16\1\34\1\16\1\41\1\40\1\37"+
    "\4\16\1\43\2\16\1\42\1\16\1\44\5\16\1\34"+
    "\1\36\3\16\1\30\4\16\1\45\3\16\1\44\7\16"+
    "\1\34\1\16\1\37\7\16\1\41\2\16\1\44\2\16"+
    "\1\36\2\16\1\46\1\42\6\16\1\34\6\16\1\42"+
    "\3\16\1\44\2\16\1\34\6\16\1\44\3\16\1\44"+
    "\2\16\1\30\1\44\1\34\25\16\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\275\0\374\0\u013b\0\u017a"+
    "\0\u017a\0\u01b9\0\176\0\176\0\u01f8\0\u0237\0\u017a\0\u0276"+
    "\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\176"+
    "\0\374\0\374\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999"+
    "\0\176\0\176\0\u017a\0\u017a\0\u09d8\0\77\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u017a\0\u017a\0\u017a\0\u0ad4\0\u0b13\0\176\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u0d0b\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db"+
    "\0\u191a\0\u0d0b\0\u1959\0\176\0\77\0\176\0\u1998\0\u19d7"+
    "\0\u1a16\0\u0c8d\0\u1a55\0\u1a16\0\u1a94\0\u1ad3\0\u1b12\0\u1a94"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1a94\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u1a94\0\u207c"+
    "\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u1a94\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d"+
    "\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625"+
    "\0\u2664\0\u26a3\0\u1a94\0\u26e2\0\u2721\0\u2760\0\u2721\0\u2760"+
    "\0\u0b52\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919"+
    "\0\u2958\0\u2997\0\u27de\0\u27de\0\u29d6\0\u2a15\0\u2a54\0\u2a93"+
    "\0\u2ad2\0\u27de\0\u27de\0\u2b11\0\u2b50\0\u2b8f\0\u27de\0\u2bce"+
    "\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u27de\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u27de\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u27de\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1"+
    "\0\u31b6\0\u3330\0\u31b6\0\u31b6\0\u31b6\0\u336f\0\u33ae\0\u33ed"+
    "\0\u342c\0\u31b6\0\u346b\0\u34aa\0\u31b6\0\u34e9\0\u31b6\0\u3528"+
    "\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u31b6\0\u36a2\0\u36e1"+
    "\0\u3720\0\u31b6\0\u375f\0\u379e\0\u37dd\0\u381c\0\u31b6\0\u385b"+
    "\0\u389a\0\u38d9\0\u385b\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14"+
    "\0\u3a53\0\u3a92\0\u385b\0\u3ad1\0\u385b\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u385b\0\u3cc9\0\u3d08\0\u3cc9"+
    "\0\u3d47\0\u3d86\0\u3cc9\0\u3dc5\0\u3e04\0\u3cc9\0\u3cc9\0\u3e43"+
    "\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3cc9\0\u3fbd\0\u3ffc"+
    "\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u403b\0\u4137\0\u4176\0\u41b5"+
    "\0\u403b\0\u41f4\0\u4233\0\u403b\0\u4272\0\u42b1\0\u42f0\0\u432f"+
    "\0\u436e\0\u43ad\0\u4272\0\u43ec\0\u442b\0\u446a\0\u43ec\0\u44a9"+
    "\0\u44e8\0\u44e8\0\u44e8\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4"+
    "\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc"+
    "\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4"+
    "\0\u4a13\0\u4a13";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\3\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\33\1\35\2\33\1\0"+
    "\1\33\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\33\1\45\1\33\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\33\1\60\3\33"+
    "\1\61\1\62\2\2\4\0\1\2\2\0\1\2\7\0"+
    "\10\2\3\0\6\2\1\0\32\2\103\0\1\4\101\0"+
    "\1\63\1\0\2\63\3\0\4\63\12\0\1\63\1\64"+
    "\43\0\1\2\1\7\3\65\1\0\1\66\2\0\1\2"+
    "\7\0\10\7\3\0\6\7\1\0\32\7\7\0\1\63"+
    "\1\0\2\63\3\0\4\63\12\0\2\63\43\0\1\2"+
    "\1\67\1\70\1\71\1\70\1\0\1\2\2\0\1\2"+
    "\7\0\10\67\3\0\6\67\1\0\32\67\7\0\1\63"+
    "\1\0\2\63\3\0\4\63\12\0\1\63\1\72\50\0"+
    "\1\63\1\0\2\63\3\0\1\63\1\73\1\63\1\72"+
    "\12\0\2\63\50\0\1\63\1\0\2\63\3\0\3\63"+
    "\1\74\12\0\1\63\1\72\57\0\1\75\3\0\1\76"+
    "\12\0\1\77\43\0\2\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\101\3\0\6\100\1\0\32\100\2\0\2\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\27\3\0\6\100"+
    "\1\0\32\100\2\0\2\100\4\0\1\100\2\0\1\100"+
    "\7\0\5\27\1\102\2\103\3\0\6\100\1\0\32\100"+
    "\2\0\2\100\4\0\1\100\2\0\1\100\7\0\10\103"+
    "\3\0\6\100\1\0\32\100\2\0\2\100\4\0\1\100"+
    "\2\0\1\100\7\0\5\103\1\104\2\105\3\0\6\100"+
    "\1\0\32\100\2\0\2\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\105\3\0\6\100\1\0\32\100\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\107\3\0\6\107"+
    "\1\0\32\107\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\107\3\0\6\107\1\0\16\107\1\110\13\107"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\107"+
    "\3\0\6\107\1\0\15\107\1\111\14\107\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\107\3\0\6\107"+
    "\1\0\4\107\1\112\22\107\1\113\2\107\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\107\3\0\6\107"+
    "\1\0\1\107\1\114\3\107\1\115\10\107\1\116\2\107"+
    "\1\117\6\107\1\120\1\107\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\107\3\0\6\107\1\0\1\107"+
    "\1\121\6\107\1\122\2\107\1\123\2\107\1\124\13\107"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\107"+
    "\3\0\6\107\1\0\11\107\1\125\4\107\1\126\13\107"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\107"+
    "\3\0\6\107\1\0\13\107\1\127\1\107\1\130\14\107"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\107"+
    "\3\0\6\107\1\0\1\107\1\131\7\107\1\132\4\107"+
    "\1\133\2\107\1\134\10\107\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\107\3\0\6\107\1\0\5\107"+
    "\1\135\24\107\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\107\3\0\6\107\1\0\6\107\1\136\5\107"+
    "\1\137\1\140\14\107\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\107\3\0\6\107\1\0\5\107\1\141"+
    "\3\107\1\142\20\107\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\107\3\0\6\107\1\0\5\107\1\143"+
    "\16\107\1\144\5\107\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\107\3\0\6\107\1\0\5\107\1\145"+
    "\16\107\1\146\5\107\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\107\3\0\6\107\1\0\2\107\1\147"+
    "\27\107\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\107\3\0\6\107\1\0\13\107\1\150\2\107\1\151"+
    "\2\107\1\152\2\107\1\153\5\107\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\107\3\0\6\107\1\0"+
    "\24\107\1\154\5\107\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\107\3\0\6\107\1\0\1\107\1\155"+
    "\3\107\1\156\3\107\1\157\4\107\1\160\13\107\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\107\3\0"+
    "\6\107\1\0\1\107\1\161\1\107\1\162\1\107\1\163"+
    "\2\107\1\164\1\165\11\107\1\166\2\107\1\167\3\107"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\107"+
    "\3\0\6\107\1\0\10\107\1\170\10\107\1\171\10\107"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\107"+
    "\3\0\6\107\1\0\17\107\1\172\12\107\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\107\3\0\6\107"+
    "\1\0\10\107\1\173\21\107\3\0\4\65\1\0\1\174"+
    "\12\0\10\65\3\0\6\65\1\0\32\65\2\0\2\2"+
    "\4\0\1\2\2\0\1\175\7\0\10\2\3\0\6\2"+
    "\1\0\32\2\13\0\1\176\67\0\1\70\6\0\1\176"+
    "\65\0\14\177\1\200\62\177\2\76\1\4\1\5\73\76"+
    "\2\100\4\0\1\100\2\0\1\100\7\0\10\100\3\0"+
    "\6\100\1\0\32\100\2\0\2\100\4\0\1\100\2\0"+
    "\1\100\7\0\10\201\3\0\6\100\1\0\32\100\2\0"+
    "\2\100\4\0\1\100\2\0\1\100\7\0\6\105\2\202"+
    "\3\0\6\100\1\0\32\100\2\0\2\100\4\0\1\100"+
    "\2\0\1\100\7\0\10\202\3\0\6\100\1\0\32\100"+
    "\2\0\2\100\4\0\1\100\2\0\1\100\7\0\5\202"+
    "\1\203\2\204\3\0\6\100\1\0\32\100\2\0\2\100"+
    "\4\0\1\100\2\0\1\100\7\0\10\204\3\0\6\100"+
    "\1\0\32\100\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\106\3\0\6\106\1\0\32\106\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\205\3\0\6\205"+
    "\1\0\32\205\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\205\3\0\6\205\1\0\15\205\1\206\14\205"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\205"+
    "\3\0\6\205\1\0\5\205\1\207\24\205\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\205\3\0\6\205"+
    "\1\0\4\205\1\210\25\205\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\205\3\0\6\205\1\0\16\205"+
    "\1\211\13\205\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\205\3\0\6\205\1\0\3\205\1\212\26\205"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\205"+
    "\3\0\6\205\1\0\7\205\1\213\22\205\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\205\3\0\6\205"+
    "\1\0\16\205\1\214\13\205\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\205\3\0\6\205\1\0\5\205"+
    "\1\215\24\205\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\205\3\0\6\205\1\0\23\205\1\216\6\205"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\205"+
    "\3\0\6\205\1\0\22\205\1\217\1\220\6\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\1\205\1\221\30\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\1\205\1\222\30\205\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\205\3\0\6\205\1\0\15\205\1\223"+
    "\14\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\14\205\1\224\15\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\26\205\1\225\3\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\22\205\1\226\7\205\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\205\3\0\6\205\1\0\5\205\1\227"+
    "\24\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\13\205\1\230\16\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\15\205\1\231\14\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\21\205\1\232\10\205\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\205\3\0\6\205\1\0\16\205\1\233"+
    "\13\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\23\205\1\234\6\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\1\205\1\235\15\205\1\236\12\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\23\205\1\237\6\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\6\205\1\240\16\205\1\241\4\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\6\205\1\242\13\205\1\243\7\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\23\205\1\244\6\205\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\205\3\0\6\205\1\0\22\205\1\245"+
    "\7\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\26\205\1\246\3\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\13\205\1\247\16\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\22\205\1\250\7\205\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\205\3\0\6\205\1\0\1\205\1\251"+
    "\30\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\17\205\1\210\2\205\1\252"+
    "\7\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\11\205\1\253\20\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\22\205\1\254\7\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\5\205\1\255\24\205\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\205\3\0\6\205\1\0\15\205\1\256"+
    "\14\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\1\205\1\257\21\205\1\260"+
    "\6\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\7\205\1\261\22\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\23\205\1\262\6\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\25\205\1\263\4\205\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\205\3\0\6\205\1\0\21\205\1\264"+
    "\10\205\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\205\3\0\6\205\1\0\23\205\1\210\6\205\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\205\3\0"+
    "\6\205\1\0\16\205\1\265\13\205\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\205\3\0\6\205\1\0"+
    "\31\205\1\266\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\205\3\0\6\205\1\0\1\205\1\267\30\205"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\205"+
    "\3\0\6\205\1\0\11\205\1\270\20\205\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\205\3\0\6\205"+
    "\1\0\11\205\1\271\20\205\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\205\3\0\6\205\1\0\24\205"+
    "\1\272\3\205\1\273\1\205\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\205\3\0\6\205\1\0\11\205"+
    "\1\274\20\205\2\0\14\177\1\275\62\177\14\276\1\277"+
    "\3\276\1\300\56\276\2\100\4\0\1\100\2\0\1\100"+
    "\7\0\10\301\3\0\6\100\1\0\32\100\2\0\2\100"+
    "\4\0\1\100\2\0\1\100\7\0\3\204\1\302\4\301"+
    "\3\0\6\100\1\0\32\100\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\32\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\23\303\1\304\6\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\14\303\1\305\15\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\13\303"+
    "\1\306\16\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\12\303\1\307\17\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\11\303\1\310\20\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\13\303\1\311\16\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\1\303"+
    "\1\312\30\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\5\303\1\313\24\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\5\303\1\314\24\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\3\303\1\315\26\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\21\303"+
    "\1\313\10\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\22\303\1\316\7\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\22\303\1\317\7\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\5\303\1\320\24\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\10\303"+
    "\1\321\4\303\1\322\14\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\5\303"+
    "\1\323\24\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\14\303\1\324\15\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\22\303\1\325\7\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\11\303\1\326\20\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\14\303"+
    "\1\327\15\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\4\303\1\330\1\303\1\0\32\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\7\303\1\331\22\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\16\303\1\332\13\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\23\303"+
    "\1\322\6\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\5\303\1\333\24\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\5\303\1\334\24\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\23\303\1\313\6\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\10\303"+
    "\1\335\21\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\11\303\1\336\20\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\13\303\1\337\16\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\23\303\1\340\6\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\23\303"+
    "\1\341\4\303\1\342\1\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\11\303"+
    "\1\343\20\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\15\303\1\344\14\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\10\303\1\345\21\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\24\303\1\346\5\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\4\303"+
    "\1\347\25\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\4\303\1\350\25\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\24\303\1\351\5\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\10\303\1\352\21\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\1\303"+
    "\1\353\30\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\5\303\1\354\24\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\5\303\1\355\24\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\26\303\1\345\3\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\5\303"+
    "\1\337\24\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\3\303\1\356\15\303"+
    "\1\357\10\303\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\303\3\0\6\303\1\0\23\303\1\360\6\303"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\303"+
    "\3\0\6\303\1\0\22\303\1\337\7\303\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\303\3\0\6\303"+
    "\1\0\5\303\1\361\24\303\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\303\3\0\6\303\1\0\13\303"+
    "\1\362\16\303\2\0\14\276\1\277\3\276\1\4\72\276"+
    "\1\277\62\276\2\100\4\0\1\100\2\0\1\100\7\0"+
    "\5\301\3\100\3\0\6\100\1\0\32\100\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\32\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\21\363\1\364\10\363"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\363"+
    "\3\0\6\363\1\0\11\363\1\365\20\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\2\363\1\366\5\363"+
    "\3\0\6\363\1\0\32\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\3\363\1\367\2\363"+
    "\1\0\7\363\1\370\22\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\6\363\1\0\15\363"+
    "\1\371\14\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\5\363\1\372\24\363"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\363"+
    "\3\0\6\363\1\0\12\363\1\373\17\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\10\363\1\374\21\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\6\363\1\0\22\363"+
    "\1\375\7\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\23\363\1\376\6\363"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\363"+
    "\3\0\6\363\1\0\15\363\1\377\14\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\11\363\1\u0100\20\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\6\363\1\0\11\363"+
    "\1\u0101\20\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\5\363\1\u0102\24\363"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\363"+
    "\3\0\6\363\1\0\22\363\1\u0103\7\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\16\363\1\u0104\13\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\6\363\1\0\5\363"+
    "\1\u0105\24\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\21\363\1\u0106\10\363"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\363"+
    "\3\0\6\363\1\0\13\363\1\u0107\16\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\22\363\1\u0105\7\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\6\363\1\0\16\363"+
    "\1\u0108\13\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\3\363\1\u0107\26\363"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\363"+
    "\3\0\6\363\1\0\1\363\1\u0109\30\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\6\363\1\u010a\23\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\6\363\1\0\5\363"+
    "\1\u010b\24\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\23\363\1\u010c\6\363"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\363"+
    "\3\0\6\363\1\0\23\363\1\u010d\6\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\5\363\1\u010e\24\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\6\363\1\0\16\363"+
    "\1\u010f\13\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\1\u0110\31\363\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\363\3\0"+
    "\6\363\1\0\21\363\1\u0111\10\363\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\363\3\0\6\363\1\0"+
    "\23\363\1\u0112\6\363\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\363\3\0\6\363\1\0\23\363\1\u0113"+
    "\6\363\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\363\3\0\6\363\1\0\1\u0114\31\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\5\363\1\u0115\24\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\363\3\0\6\363\1\0\12\363"+
    "\1\u010e\17\363\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\363\3\0\6\363\1\0\23\363\1\371\6\363"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\363"+
    "\3\0\6\363\1\0\3\363\1\u0116\26\363\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\363\3\0\6\363"+
    "\1\0\5\363\1\u0117\24\363\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0118\3\0\6\u0118\1\0\32\u0118"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0118"+
    "\3\0\6\u0118\1\0\16\u0118\1\u0119\13\u0118\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\u0118\3\0\6\u0118"+
    "\1\0\5\u0118\1\u011a\24\u0118\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0118\3\0\2\u0118\1\u011b\3\u0118"+
    "\1\0\32\u0118\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\u0118\3\0\6\u0118\1\0\13\u0118\1\u011c\16\u0118"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0118"+
    "\3\0\6\u0118\1\0\21\u0118\1\u011d\10\u0118\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\u0118\3\0\6\u0118"+
    "\1\0\1\u0118\1\u011e\30\u0118\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0118\3\0\6\u0118\1\0\1\u0118"+
    "\1\u011f\30\u0118\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\u0118\3\0\6\u0118\1\0\22\u0118\1\u0120\7\u0118"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0118"+
    "\3\0\6\u0118\1\0\13\u0118\1\u0121\16\u0118\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\u0118\3\0\6\u0118"+
    "\1\0\5\u0118\1\u0122\24\u0118\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0118\3\0\6\u0118\1\0\10\u0118"+
    "\1\u0123\21\u0118\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\u0118\3\0\6\u0118\1\0\22\u0118\1\u0124\7\u0118"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0118"+
    "\3\0\6\u0118\1\0\23\u0118\1\u0125\6\u0118\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\u0118\3\0\6\u0118"+
    "\1\0\4\u0118\1\u0123\25\u0118\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0118\3\0\6\u0118\1\0\3\u0118"+
    "\1\u0126\26\u0118\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\u0118\3\0\6\u0118\1\0\16\u0118\1\u0127\13\u0118"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0118"+
    "\3\0\6\u0118\1\0\21\u0118\1\u011b\10\u0118\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\u0118\3\0\6\u0118"+
    "\1\0\11\u0118\1\u0128\20\u0118\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0118\3\0\6\u0118\1\0\1\u0129"+
    "\31\u0118\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u0118\3\0\6\u0118\1\0\14\u0118\1\u0123\15\u0118\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u0118\3\0"+
    "\6\u0118\1\0\2\u0118\1\u012a\11\u0118\1\u012b\6\u0118\1\u012c"+
    "\6\u0118\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u0118\3\0\6\u0118\1\0\15\u0118\1\u0123\14\u0118\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u0118\3\0"+
    "\6\u0118\1\0\5\u0118\1\u0123\24\u0118\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u0118\3\0\6\u0118\1\0"+
    "\2\u0118\1\u012a\27\u0118\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u0118\3\0\6\u0118\1\0\15\u0118\1\u011b"+
    "\14\u0118\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u0118\3\0\6\u0118\1\0\10\u0118\1\u012d\21\u0118\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u012e\3\0"+
    "\6\u012e\1\0\32\u012e\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u012e\3\0\6\u012e\1\0\13\u012e\1\u012f"+
    "\16\u012e\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u012e\3\0\6\u012e\1\0\22\u012e\1\u0130\7\u012e\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u012e\3\0"+
    "\6\u012e\1\0\5\u012e\1\u0131\24\u012e\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u012e\3\0\6\u012e\1\0"+
    "\16\u012e\1\u0132\13\u012e\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u012e\3\0\6\u012e\1\0\15\u012e\1\u0133"+
    "\14\u012e\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u012e\3\0\6\u012e\1\0\15\u012e\1\u0134\14\u012e\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u012e\3\0"+
    "\6\u012e\1\0\11\u012e\1\u0135\20\u012e\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u012e\3\0\6\u012e\1\0"+
    "\5\u012e\1\u0136\24\u012e\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u012e\3\0\6\u012e\1\0\22\u012e\1\u0137"+
    "\7\u012e\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u012e\3\0\6\u012e\1\0\11\u012e\1\u0138\20\u012e\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u012e\3\0"+
    "\6\u012e\1\0\13\u012e\1\u0139\16\u012e\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u012e\3\0\6\u012e\1\0"+
    "\21\u012e\1\u013a\10\u012e\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u012e\3\0\6\u012e\1\0\16\u012e\1\u013b"+
    "\13\u012e\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u012e\3\0\6\u012e\1\0\3\u012e\1\u013c\26\u012e\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u012e\3\0"+
    "\6\u012e\1\0\11\u012e\1\u013d\20\u012e\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u012e\3\0\6\u012e\1\0"+
    "\7\u012e\1\u013e\7\u012e\1\u013f\12\u012e\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u012e\3\0\6\u012e\1\0"+
    "\5\u012e\1\u0140\24\u012e\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u0141\3\0\6\u0141\1\0\32\u0141\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u0141\3\0"+
    "\6\u0141\1\0\13\u0141\1\u0142\16\u0141\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u0141\3\0\6\u0141\1\0"+
    "\14\u0141\1\u0143\15\u0141\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u0141\3\0\6\u0141\1\0\24\u0141\1\u0144"+
    "\5\u0141\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u0141\3\0\6\u0141\1\0\23\u0141\1\u0145\6\u0141\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u0141\3\0"+
    "\6\u0141\1\0\16\u0141\1\u0146\13\u0141\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u0141\3\0\6\u0141\1\0"+
    "\23\u0141\1\u0147\6\u0141\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u0141\3\0\6\u0141\1\0\5\u0141\1\u0148"+
    "\24\u0141\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u0141\3\0\6\u0141\1\0\14\u0141\1\u0149\15\u0141\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u0141\3\0"+
    "\6\u0141\1\0\15\u0141\1\u014a\14\u0141\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u0141\3\0\6\u0141\1\0"+
    "\16\u0141\1\u014b\13\u0141\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u0141\3\0\6\u0141\1\0\15\u0141\1\u014c"+
    "\14\u0141\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\3\u0141\1\u014c\4\u0141\3\0\6\u0141\1\0\32\u0141\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u0141\3\0"+
    "\6\u0141\1\0\3\u0141\1\u014c\26\u0141\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u014d\3\0\6\u014d\1\0"+
    "\32\u014d\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u014d\3\0\6\u014d\1\0\5\u014d\1\u014e\24\u014d\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u014d\3\0"+
    "\6\u014d\1\0\5\u014d\1\u014f\24\u014d\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u014d\3\0\6\u014d\1\0"+
    "\15\u014d\1\u0150\14\u014d\2\0\2\106\4\0\1\106\2\0"+
    "\1\106\7\0\10\u014d\3\0\6\u014d\1\0\15\u014d\1\u0151"+
    "\14\u014d\2\0\2\106\4\0\1\106\2\0\1\106\7\0"+
    "\10\u014d\3\0\6\u014d\1\0\11\u014d\1\u0152\20\u014d\2\0"+
    "\2\106\4\0\1\106\2\0\1\106\7\0\10\u014d\3\0"+
    "\6\u014d\1\0\22\u014d\1\u0153\7\u014d\2\0\2\106\4\0"+
    "\1\106\2\0\1\106\7\0\10\u014d\3\0\5\u014d\1\u0153"+
    "\1\0\32\u014d\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\u014d\3\0\6\u014d\1\0\15\u014d\1\u0153\14\u014d"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0154"+
    "\3\0\6\u0154\1\0\32\u0154\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0154\3\0\6\u0154\1\0\21\u0154"+
    "\1\u0155\10\u0154\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\u0154\3\0\6\u0154\1\0\15\u0154\1\u0156\14\u0154"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0154"+
    "\3\0\6\u0154\1\0\4\u0154\1\u0157\25\u0154\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\u0154\3\0\6\u0154"+
    "\1\0\22\u0154\1\u0157\7\u0154\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0154\3\0\6\u0154\1\0\16\u0154"+
    "\1\u0158\13\u0154\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\u0159\3\0\6\u0159\1\0\32\u0159\2\0\2\106"+
    "\4\0\1\106\2\0\1\106\7\0\10\u0159\3\0\6\u0159"+
    "\1\0\22\u0159\1\u015a\7\u0159\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0159\3\0\6\u0159\1\0\23\u0159"+
    "\1\u015b\6\u0159\2\0\2\106\4\0\1\106\2\0\1\106"+
    "\7\0\10\u0159\3\0\6\u0159\1\0\15\u0159\1\u015c\14\u0159"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u015d"+
    "\3\0\6\u015d\1\0\32\u015d\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u015e\3\0\6\u015e\1\0\32\u015e"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u015f"+
    "\3\0\6\u015f\1\0\32\u015f\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0160\3\0\6\u0160\1\0\32\u0160"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0161"+
    "\3\0\6\u0161\1\0\32\u0161\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0162\3\0\6\u0162\1\0\32\u0162"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0163"+
    "\3\0\6\u0163\1\0\32\u0163\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0164\3\0\6\u0164\1\0\32\u0164"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0165"+
    "\3\0\6\u0165\1\0\32\u0165\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0166\3\0\6\u0166\1\0\32\u0166"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0167"+
    "\3\0\6\u0167\1\0\32\u0167\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0168\3\0\6\u0168\1\0\32\u0168"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0169"+
    "\3\0\6\u0169\1\0\32\u0169\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u016a\3\0\6\u016a\1\0\32\u016a"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u016b"+
    "\3\0\6\u016b\1\0\32\u016b\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u016c\3\0\6\u016c\1\0\32\u016c"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u016d"+
    "\3\0\6\u016d\1\0\32\u016d\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u016e\3\0\6\u016e\1\0\32\u016e"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u016f"+
    "\3\0\6\u016f\1\0\32\u016f\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0170\3\0\6\u0170\1\0\32\u0170"+
    "\2\0\2\106\4\0\1\106\2\0\1\106\7\0\10\u0171"+
    "\3\0\6\u0171\1\0\32\u0171\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\7\0\10\u0172\3\0\6\u0172\1\0\32\u0172"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19026];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\6\1\2\11\13\1\1\11\30\1\2\11"+
    "\12\1\1\0\1\1\1\11\74\1\1\11\1\1\1\11"+
    "\1\0\76\1\2\0\263\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEXICO_5", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 2:
            { return token(yytext(), "ERROR_LEXICO_1", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 3:
            { /*Ignorar*/
            }
            // fall through
          case 42: break;
          case 4:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 5:
            { return token(yytext(), "ERROR_LEXICO_7", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 6:
            { return token(yytext(), "OP_ARITMETICO", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 7:
            { return token(yytext(), "DELIMITADOR", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 8:
            { return token(yytext(), "SEPARADOR", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 9:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 10:
            { return token(yytext(), "OP_COMPARA", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 11:
            { return token (yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 12:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 13:
            { return token (yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 14:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 15:
            { return token(yytext(), "DEL_LLAVE_A", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 16:
            { return token(yytext(), "DEL_LLAVE_C", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 17:
            { return token(yytext(), "STRING", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 18:
            { return token(yytext(), "ERROR_LEXICO_6", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 19:
            { return token(yytext(), "OP_INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 20:
            { return token(yytext(), "ERROR_LEXICO_8", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 21:
            { return token(yytext(), "ERROR_LEXICO_3", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 22:
            { return token(yytext(), "ERROR_LEXICO_4", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 23:
            { return token(yytext(), "ES_IF_ELSE", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 24:
            { return token(yytext(), "CONTROLADORES", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 25:
            { return token(yytext(), "CHAR", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 26:
            { return token(yytext(), "ERROR_LEXICO_8", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 27:
            { return token(yytext(), "INT", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 28:
            { return token(yytext(), "MET_FUNC", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 29:
            { return token(yytext(), "ES_FOR", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 30:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 31:
            { return token(yytext(), "IMPORT_CREACION", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 32:
            { return token(yytext(), "ES_TRY_CATCH", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 33:
            { return token(yytext(), "ES_SWITCH", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 34:
            { return token(yytext(), "VALOR_ESPECIAL", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 35:
            { return token(yytext(), "BOOLEAN", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 36:
            { return token(yytext(), "INTERF_GRAFICA", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 37:
            { return token(yytext(), "ES_WHILE", yyline, yycolumn);
            }
            // fall through
          case 76: break;
          case 38:
            { return token(yytext(), "ES_DO_WHILE", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 39:
            { return token(yytext(), "ERROR_LEXICO_2", yyline, yycolumn);
            }
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
