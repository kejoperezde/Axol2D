// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\3\30\1\0\1\31\1\32"+
    "\1\33\1\32\2\0\2\34\1\35\1\36\1\37\12\34"+
    "\1\40\7\34\2\41\1\34\1\12\1\0\1\12\1\7"+
    "\1\42\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\34\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\12\1\10\1\12\103\0"+
    "\1\34\7\0\1\34\3\0\1\34\3\0\1\34\1\0"+
    "\1\34\6\0\1\34\1\0\1\34\4\0\1\34\7\0"+
    "\1\34\3\0\1\34\3\0\1\34\1\0\1\34\6\0"+
    "\1\34\1\0\1\34\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\5\1\6\1\4\1\2"+
    "\1\7\2\6\1\10\1\6\1\10\1\6\3\11\1\12"+
    "\1\13\26\14\1\1\1\12\2\5\1\0\3\15\1\13"+
    "\1\16\1\17\1\0\1\3\1\13\1\20\2\11\1\21"+
    "\1\0\26\14\1\22\33\14\2\23\1\0\1\24\2\11"+
    "\1\25\3\14\1\22\53\14\1\24\2\0\1\3\2\11"+
    "\1\25\10\14\1\22\17\14\1\22\12\14\1\26\1\25"+
    "\6\14\1\22\4\14\1\26\10\14\1\22\5\14\1\25"+
    "\3\14\1\22\16\14\1\25\2\14\1\22\14\14\1\25"+
    "\4\14\1\22\5\14\1\25\6\14\1\22\1\25\3\14"+
    "\1\22\1\14\1\25\1\14\1\22\1\25\1\14\1\25"+
    "\1\14\1\25\1\14\1\25\1\14\1\25\1\14\1\25"+
    "\1\14\1\25\1\14\1\25\1\14\1\25\1\14\1\25"+
    "\1\14\1\25\1\14\1\25\1\14\1\25\1\14\1\25"+
    "\1\14\1\25\1\14\1\25\1\14\1\25\1\14\1\25"+
    "\1\14\1\25\1\14\1\25\1\14\1\25\1\14\1\25"+
    "\1\27\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\264\0\360\0\u012c\0\u0168"+
    "\0\u0168\0\u01a4\0\170\0\u01e0\0\u021c\0\u0168\0\u0258\0\170"+
    "\0\u0294\0\u02d0\0\u030c\0\u0348\0\360\0\360\0\u0384\0\u03c0"+
    "\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0"+
    "\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u0168\0\u0168\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0168\0\u0168\0\u0168\0\u0a14"+
    "\0\u0a50\0\170\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u0bb8\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\74\0\170\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u18d8\0\u1860\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8"+
    "\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88"+
    "\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328"+
    "\0\u2364\0\u2328\0\u2364\0\u0a8c\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u2418\0\u25f8"+
    "\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8"+
    "\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8"+
    "\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98"+
    "\0\u2bd4\0\u2418\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u2d78\0\u2c4c\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2c4c\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264"+
    "\0\u32a0\0\u3228\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8"+
    "\0\u3624\0\u3660\0\u369c\0\u3660\0\u36d8\0\u3714\0\u3750\0\u378c"+
    "\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c"+
    "\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u39e4\0\u3ad4\0\u3b10"+
    "\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0"+
    "\0\u3d2c\0\u3d68\0\u3c3c\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3de0"+
    "\0\u3e94\0\u3ed0\0\u3f0c\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc"+
    "\0\u4038\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc"+
    "\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc"+
    "\0\u43f8\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c"+
    "\0\u45d8\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c"+
    "\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c"+
    "\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\5\23\1\24\1\22\1\20\1\25\1\26"+
    "\1\27\1\30\1\27\1\31\3\27\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\27\1\41\1\27\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\27\1\54\3\27\2\2\4\0\1\2\2\0"+
    "\1\2\7\0\10\2\3\0\40\2\76\0\1\4\76\0"+
    "\1\55\1\0\2\55\2\0\4\55\13\0\1\55\1\56"+
    "\40\0\1\2\1\57\3\60\1\0\1\2\2\0\1\2"+
    "\3\0\3\61\1\0\10\57\3\0\40\57\5\0\1\55"+
    "\1\0\2\55\2\0\4\55\13\0\2\55\40\0\1\2"+
    "\1\62\1\63\1\64\1\63\1\0\1\2\2\0\1\2"+
    "\7\0\10\62\3\0\40\62\5\0\1\55\1\0\2\55"+
    "\2\0\4\55\13\0\1\55\1\65\45\0\1\55\1\0"+
    "\2\55\2\0\1\55\1\66\2\55\13\0\1\55\1\65"+
    "\45\0\1\55\1\0\2\55\2\0\3\55\1\67\13\0"+
    "\1\55\1\65\53\0\1\70\4\0\1\71\12\0\1\72"+
    "\40\0\2\73\4\0\1\73\2\0\1\73\5\0\1\73"+
    "\1\0\10\74\3\0\42\73\4\0\1\73\2\0\1\73"+
    "\5\0\1\73\1\0\10\22\3\0\42\73\4\0\1\73"+
    "\2\0\1\73\5\0\1\73\1\0\5\22\1\75\2\74"+
    "\3\0\40\73\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\100\3\0\40\100\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\100\3\0\24\100"+
    "\1\101\13\100\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\100\3\0\23\100\1\102\14\100\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\100"+
    "\3\0\12\100\1\103\22\100\1\104\2\100\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\100\3\0"+
    "\7\100\1\105\3\100\1\106\10\100\1\107\2\100\1\110"+
    "\6\100\1\111\1\100\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\100\3\0\7\100\1\112\6\100"+
    "\1\113\2\100\1\114\2\100\1\115\13\100\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\100\3\0"+
    "\17\100\1\116\4\100\1\117\13\100\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\100\3\0\21\100"+
    "\1\120\1\100\1\102\14\100\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\100\3\0\7\100\1\121"+
    "\7\100\1\122\4\100\1\123\2\100\1\124\10\100\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\100"+
    "\3\0\13\100\1\125\24\100\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\100\3\0\14\100\1\126"+
    "\5\100\1\127\1\130\14\100\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\100\3\0\13\100\1\131"+
    "\3\100\1\132\20\100\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\100\3\0\13\100\1\133\16\100"+
    "\1\134\5\100\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\100\3\0\13\100\1\135\16\100\1\136"+
    "\5\100\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\100\3\0\10\100\1\137\27\100\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\100\3\0"+
    "\21\100\1\140\2\100\1\141\2\100\1\142\2\100\1\143"+
    "\5\100\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\100\3\0\32\100\1\144\5\100\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\100\3\0"+
    "\7\100\1\145\3\100\1\146\3\100\1\147\4\100\1\150"+
    "\13\100\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\100\3\0\7\100\1\151\1\100\1\152\1\100"+
    "\1\130\2\100\1\153\1\154\11\100\1\155\2\100\1\156"+
    "\3\100\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\100\3\0\16\100\1\157\10\100\1\160\10\100"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\100\3\0\25\100\1\126\12\100\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\100\3\0\16\100"+
    "\1\161\21\100\1\2\1\57\3\60\1\0\1\162\2\0"+
    "\1\2\3\0\3\61\1\0\10\57\3\0\40\57\1\0"+
    "\4\60\1\0\1\163\6\0\3\61\1\0\10\60\3\0"+
    "\40\60\1\0\4\61\1\0\1\163\6\0\3\61\1\0"+
    "\10\61\3\0\40\61\2\2\4\0\1\2\2\0\1\162"+
    "\7\0\10\2\3\0\40\2\11\0\1\163\64\0\1\63"+
    "\6\0\1\163\62\0\13\164\1\165\60\164\2\71\1\4"+
    "\1\5\70\71\2\73\4\0\1\73\2\0\1\73\5\0"+
    "\1\73\1\0\10\73\3\0\42\73\4\0\1\73\2\0"+
    "\1\73\5\0\1\73\1\0\10\166\3\0\42\73\4\0"+
    "\1\73\2\0\1\73\5\0\1\73\1\0\5\74\1\167"+
    "\2\166\3\0\40\73\2\76\4\0\1\76\2\0\1\76"+
    "\7\0\10\76\3\0\40\76\34\0\40\170\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\40\171\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\171\3\0\23\171\1\172\14\171\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\13\171\1\173\24\171\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\171\3\0\12\171\1\174\25\171"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\171\3\0\24\171\1\175\13\171\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\171\3\0\11\171"+
    "\1\176\26\171\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\171\3\0\15\171\1\177\22\171\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\171"+
    "\3\0\24\171\1\200\13\171\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\171\3\0\13\171\1\201"+
    "\24\171\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\171\3\0\31\171\1\202\6\171\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\30\171\1\202\1\203\6\171\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\171\3\0\7\171\1\204"+
    "\30\171\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\171\3\0\7\171\1\205\30\171\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\23\171\1\206\14\171\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\171\3\0\22\171\1\207\15\171"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\171\3\0\34\171\1\210\3\171\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\171\3\0\30\171"+
    "\1\202\7\171\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\171\3\0\21\171\1\211\16\171\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\171"+
    "\3\0\23\171\1\212\14\171\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\171\3\0\27\171\1\174"+
    "\10\171\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\171\3\0\24\171\1\213\13\171\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\31\171\1\214\6\171\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\171\3\0\7\171\1\215\15\171"+
    "\1\216\12\171\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\171\3\0\31\171\1\174\6\171\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\171"+
    "\3\0\14\171\1\217\16\171\1\220\4\171\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\14\171\1\221\13\171\1\217\7\171\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\171\3\0\31\171"+
    "\1\222\6\171\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\171\3\0\30\171\1\223\7\171\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\171"+
    "\3\0\34\171\1\174\3\171\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\171\3\0\21\171\1\224"+
    "\16\171\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\171\3\0\30\171\1\225\7\171\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\7\171\1\226\30\171\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\171\3\0\25\171\1\174\2\171"+
    "\1\227\7\171\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\171\3\0\17\171\1\230\20\171\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\171"+
    "\3\0\30\171\1\231\7\171\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\171\3\0\13\171\1\232"+
    "\24\171\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\171\3\0\23\171\1\233\14\171\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\7\171\1\234\21\171\1\235\6\171\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\171\3\0\15\171"+
    "\1\236\22\171\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\171\3\0\31\171\1\237\6\171\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\171"+
    "\3\0\33\171\1\240\4\171\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\171\3\0\27\171\1\241"+
    "\10\171\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\171\3\0\24\171\1\242\13\171\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\171\3\0"+
    "\37\171\1\202\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\171\3\0\7\171\1\243\30\171\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\171"+
    "\3\0\17\171\1\244\20\171\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\171\3\0\17\171\1\245"+
    "\20\171\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\171\3\0\32\171\1\246\3\171\1\174\1\171"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\171\3\0\17\171\1\247\20\171\13\164\1\250\60\164"+
    "\13\251\1\252\4\251\1\253\53\251\2\73\4\0\1\73"+
    "\2\0\1\73\5\0\1\73\1\0\10\254\3\0\42\73"+
    "\4\0\1\73\2\0\1\73\5\0\1\73\1\0\3\166"+
    "\1\255\4\254\3\0\40\73\21\0\10\256\3\0\40\256"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\257\3\0\40\257\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\257\3\0\31\257\1\260\6\257"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\257\3\0\22\257\1\261\15\257\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\257\3\0\21\257"+
    "\1\262\16\257\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\257\3\0\20\257\1\263\17\257\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\257"+
    "\3\0\17\257\1\264\20\257\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\257\3\0\21\257\1\265"+
    "\16\257\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\257\3\0\7\257\1\266\30\257\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\257\3\0"+
    "\13\257\1\267\24\257\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\257\3\0\11\257\1\270\26\257"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\257\3\0\27\257\1\267\10\257\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\257\3\0\30\257"+
    "\1\271\7\257\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\257\3\0\30\257\1\272\7\257\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\257"+
    "\3\0\13\257\1\273\24\257\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\257\3\0\16\257\1\274"+
    "\4\257\1\267\14\257\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\257\3\0\30\257\1\275\7\257"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\257\3\0\17\257\1\276\20\257\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\257\3\0\22\257"+
    "\1\267\15\257\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\257\3\0\4\257\1\277\33\257\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\257"+
    "\3\0\15\257\1\300\22\257\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\257\3\0\24\257\1\301"+
    "\13\257\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\257\3\0\31\257\1\267\6\257\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\257\3\0"+
    "\13\257\1\302\24\257\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\257\3\0\13\257\1\271\24\257"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\257\3\0\16\257\1\303\21\257\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\257\3\0\17\257"+
    "\1\304\20\257\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\257\3\0\21\257\1\267\16\257\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\257"+
    "\3\0\31\257\1\305\6\257\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\257\3\0\31\257\1\306"+
    "\4\257\1\307\1\257\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\257\3\0\17\257\1\310\20\257"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\257\3\0\23\257\1\311\14\257\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\257\3\0\16\257"+
    "\1\267\21\257\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\257\3\0\32\257\1\300\5\257\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\257"+
    "\3\0\12\257\1\312\25\257\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\257\3\0\12\257\1\313"+
    "\25\257\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\257\3\0\32\257\1\314\5\257\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\257\3\0"+
    "\16\257\1\315\21\257\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\257\3\0\7\257\1\316\30\257"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\257\3\0\13\257\1\317\24\257\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\257\3\0\13\257"+
    "\1\320\24\257\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\257\3\0\34\257\1\267\3\257\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\257"+
    "\3\0\11\257\1\266\15\257\1\315\10\257\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\257\3\0"+
    "\31\257\1\321\6\257\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\257\3\0\30\257\1\267\7\257"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\257\3\0\13\257\1\322\24\257\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\257\3\0\21\257"+
    "\1\300\16\257\13\251\1\252\4\251\1\4\66\251\1\252"+
    "\60\251\2\73\4\0\1\73\2\0\1\73\5\0\1\73"+
    "\1\0\5\254\3\73\3\0\40\73\21\0\10\323\3\0"+
    "\40\323\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\324\3\0\40\324\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\324\3\0\27\324\1\325"+
    "\10\324\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\324\3\0\17\324\1\326\20\324\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\2\324\1\327"+
    "\5\324\3\0\40\324\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\324\3\0\3\324\1\330\11\324"+
    "\1\331\22\324\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\324\3\0\23\324\1\332\14\324\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\324"+
    "\3\0\13\324\1\333\24\324\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\324\3\0\20\324\1\332"+
    "\17\324\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\324\3\0\16\324\1\332\21\324\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\324\3\0"+
    "\30\324\1\332\7\324\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\324\3\0\31\324\1\334\6\324"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\324\3\0\23\324\1\335\14\324\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\324\3\0\17\324"+
    "\1\336\20\324\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\324\3\0\13\324\1\337\24\324\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\324"+
    "\3\0\30\324\1\340\7\324\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\324\3\0\24\324\1\341"+
    "\13\324\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\324\3\0\13\324\1\332\24\324\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\324\3\0"+
    "\27\324\1\342\10\324\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\324\3\0\21\324\1\332\16\324"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\324\3\0\24\324\1\343\13\324\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\324\3\0\11\324"+
    "\1\332\26\324\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\324\3\0\7\324\1\344\30\324\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\324"+
    "\3\0\14\324\1\345\23\324\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\324\3\0\13\324\1\346"+
    "\24\324\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\324\3\0\31\324\1\347\6\324\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\324\3\0"+
    "\31\324\1\350\6\324\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\324\3\0\24\324\1\351\13\324"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\324\3\0\6\324\1\352\31\324\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\324\3\0\27\324"+
    "\1\353\10\324\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\324\3\0\31\324\1\332\6\324\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\324"+
    "\3\0\31\324\1\354\6\324\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\324\3\0\6\324\1\355"+
    "\31\324\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\324\3\0\13\324\1\353\24\324\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\324\3\0"+
    "\11\324\1\340\26\324\21\0\10\356\3\0\40\356\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\357"+
    "\3\0\40\357\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\357\3\0\24\357\1\360\13\357\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\357"+
    "\3\0\13\357\1\361\24\357\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\357\3\0\2\357\1\362"+
    "\35\357\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\357\3\0\21\357\1\363\16\357\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\357\3\0"+
    "\27\357\1\364\10\357\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\357\3\0\7\357\1\365\30\357"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\357\3\0\7\357\1\366\30\357\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\357\3\0\30\357"+
    "\1\367\7\357\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\357\3\0\21\357\1\370\16\357\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\357"+
    "\3\0\16\357\1\362\21\357\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\357\3\0\30\357\1\371"+
    "\7\357\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\357\3\0\31\357\1\362\6\357\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\357\3\0"+
    "\12\357\1\362\25\357\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\357\3\0\11\357\1\372\26\357"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\357\3\0\24\357\1\373\13\357\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\357\3\0\27\357"+
    "\1\362\10\357\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\357\3\0\17\357\1\374\20\357\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\357"+
    "\3\0\6\357\1\375\31\357\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\357\3\0\22\357\1\362"+
    "\15\357\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\357\3\0\10\357\1\376\11\357\1\377\6\357"+
    "\1\u0100\6\357\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\357\3\0\23\357\1\362\14\357\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\357"+
    "\3\0\13\357\1\362\24\357\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\357\3\0\10\357\1\376"+
    "\27\357\21\0\10\u0101\3\0\40\u0101\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u0102\3\0\40\u0102"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u0102\3\0\21\u0102\1\u0103\16\u0102\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u0102\3\0\30\u0102"+
    "\1\u0104\7\u0102\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u0102\3\0\13\u0102\1\u0105\24\u0102\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\u0102"+
    "\3\0\24\u0102\1\u0106\13\u0102\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\u0102\3\0\23\u0102\1\u0104"+
    "\14\u0102\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\u0102\3\0\23\u0102\1\u0107\14\u0102\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u0102\3\0"+
    "\17\u0102\1\u0108\20\u0102\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\u0102\3\0\13\u0102\1\u0104\24\u0102"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u0102\3\0\17\u0102\1\u0109\20\u0102\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u0102\3\0\21\u0102"+
    "\1\u010a\16\u0102\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u0102\3\0\27\u0102\1\u010b\10\u0102\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\u0102"+
    "\3\0\24\u0102\1\u010c\13\u0102\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\u0102\3\0\11\u0102\1\u010d"+
    "\26\u0102\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\u0102\3\0\17\u0102\1\u010e\20\u0102\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u0102\3\0"+
    "\15\u0102\1\u0104\7\u0102\1\u010f\12\u0102\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u0102\3\0\13\u0102"+
    "\1\u0110\24\u0102\21\0\10\u0111\3\0\40\u0111\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u0112\3\0"+
    "\40\u0112\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\u0112\3\0\21\u0112\1\u0113\16\u0112\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u0112\3\0"+
    "\22\u0112\1\u0114\15\u0112\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\u0112\3\0\32\u0112\1\u0115\5\u0112"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u0112\3\0\31\u0112\1\u0116\6\u0112\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u0112\3\0\24\u0112"+
    "\1\u0117\13\u0112\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u0112\3\0\31\u0112\1\u0118\6\u0112\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\u0112"+
    "\3\0\13\u0112\1\u0119\24\u0112\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\u0112\3\0\22\u0112\1\u0116"+
    "\15\u0112\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\u0112\3\0\23\u0112\1\u011a\14\u0112\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u0112\3\0"+
    "\24\u0112\1\u011b\13\u0112\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\u0112\3\0\23\u0112\1\u0116\14\u0112"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\3\u0112\1\u0116\4\u0112\3\0\40\u0112\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u0112\3\0\11\u0112"+
    "\1\u0116\26\u0112\21\0\10\u011c\3\0\40\u011c\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u011d\3\0"+
    "\40\u011d\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\u011d\3\0\13\u011d\1\u011e\24\u011d\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u011d\3\0"+
    "\13\u011d\1\u011f\24\u011d\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\u011d\3\0\23\u011d\1\u0120\14\u011d"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u011d\3\0\23\u011d\1\u0121\14\u011d\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u011d\3\0\17\u011d"+
    "\1\u0122\20\u011d\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u011d\3\0\30\u011d\1\u0123\7\u011d\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\u011d"+
    "\3\0\5\u011d\1\u0123\32\u011d\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\u011d\3\0\23\u011d\1\u0123"+
    "\14\u011d\21\0\10\u0124\3\0\40\u0124\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u0125\3\0\40\u0125"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u0125\3\0\27\u0125\1\u0126\10\u0125\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u0125\3\0\23\u0125"+
    "\1\u0127\14\u0125\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u0125\3\0\12\u0125\1\u0128\25\u0125\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\u0125"+
    "\3\0\30\u0125\1\u0128\7\u0125\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\u0125\3\0\24\u0125\1\u0129"+
    "\13\u0125\21\0\10\u012a\3\0\40\u012a\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u012b\3\0\40\u012b"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u012b\3\0\30\u012b\1\u012c\7\u012b\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u012b\3\0\31\u012b"+
    "\1\u012c\6\u012b\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u012b\3\0\23\u012b\1\u012c\14\u012b\21\0"+
    "\10\u012d\3\0\40\u012d\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\u012e\3\0\40\u012e\21\0\10\u012f"+
    "\3\0\40\u012f\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u0130\3\0\40\u0130\21\0\10\u0131\3\0"+
    "\40\u0131\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\u0132\3\0\40\u0132\21\0\10\u0133\3\0\40\u0133"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u0134\3\0\40\u0134\21\0\10\u0135\3\0\40\u0135\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\u0136"+
    "\3\0\40\u0136\21\0\10\u0137\3\0\40\u0137\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u0138\3\0"+
    "\40\u0138\21\0\10\u0139\3\0\40\u0139\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u013a\3\0\40\u013a"+
    "\21\0\10\u013b\3\0\40\u013b\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\u013c\3\0\40\u013c\21\0"+
    "\10\u013d\3\0\40\u013d\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\u013e\3\0\40\u013e\21\0\10\u013f"+
    "\3\0\40\u013f\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u0140\3\0\40\u0140\21\0\10\u0141\3\0"+
    "\40\u0141\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\u0142\3\0\40\u0142\21\0\10\u0143\3\0\40\u0143"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u0144\3\0\40\u0144\21\0\10\u0145\3\0\40\u0145\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\u0146"+
    "\3\0\40\u0146\21\0\10\u0147\3\0\40\u0147\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u0148\3\0"+
    "\40\u0148\21\0\10\u0149\3\0\40\u0149\2\76\4\0\1\76"+
    "\2\0\1\76\5\0\1\77\1\0\10\u014a\3\0\40\u014a"+
    "\21\0\10\u014b\3\0\40\u014b\2\76\4\0\1\76\2\0"+
    "\1\76\5\0\1\77\1\0\10\u014c\3\0\40\u014c\21\0"+
    "\10\u014d\3\0\40\u014d\2\76\4\0\1\76\2\0\1\76"+
    "\5\0\1\77\1\0\10\u014e\3\0\40\u014e\21\0\10\u014f"+
    "\3\0\40\u014f\2\76\4\0\1\76\2\0\1\76\5\0"+
    "\1\77\1\0\10\u0150\3\0\40\u0150\21\0\10\u0151\3\0"+
    "\40\u0151\2\76\4\0\1\76\2\0\1\76\5\0\1\77"+
    "\1\0\10\u0152\3\0\40\u0152\21\0\10\u0153\3\0\40\u0153"+
    "\2\76\4\0\1\76\2\0\1\76\5\0\1\77\1\0"+
    "\10\u0154\3\0\40\u0154\21\0\10\u0155\3\0\40\u0155\2\76"+
    "\4\0\1\76\2\0\1\76\5\0\1\77\1\0\10\u0156"+
    "\3\0\40\u0156\21\0\10\u0157\3\0\40\u0157\2\76\4\0"+
    "\1\76\2\0\1\76\5\0\1\77\1\0\10\u0158\3\0"+
    "\40\u0158\21\0\10\u0159\3\0\40\u0159\2\76\4\0\1\76"+
    "\2\0\1\76\7\0\10\u0158\3\0\40\u0158";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\6\1\1\11\4\1\1\11\40\1\1\0"+
    "\6\1\1\0\1\1\1\11\4\1\1\0\63\1\1\11"+
    "\1\0\64\1\2\0\256\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEXICO_5", yyline, yycolumn);
            }
            // fall through
          case 24: break;
          case 2:
            { return token(yytext(), "ERROR_LEXICO_1", yyline, yycolumn);
            }
            // fall through
          case 25: break;
          case 3:
            { /*Ignorar*/
            }
            // fall through
          case 26: break;
          case 4:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 27: break;
          case 5:
            { return token(yytext(), "ERROR_LEXICO_7", yyline, yycolumn);
            }
            // fall through
          case 28: break;
          case 6:
            { return token(yytext(), "OP_ARITMETICO", yyline, yycolumn);
            }
            // fall through
          case 29: break;
          case 7:
            { return token(yytext(), "DELIMITADOR", yyline, yycolumn);
            }
            // fall through
          case 30: break;
          case 8:
            { return token(yytext(), "SEPARADOR", yyline, yycolumn);
            }
            // fall through
          case 31: break;
          case 9:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 32: break;
          case 10:
            { return token(yytext(), "OP_COMPARA", yyline, yycolumn);
            }
            // fall through
          case 33: break;
          case 11:
            { return token (yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 34: break;
          case 12:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 35: break;
          case 13:
            { return token(yytext(), "ERROR_LEXICO_6", yyline, yycolumn);
            }
            // fall through
          case 36: break;
          case 14:
            { return token(yytext(), "OP_INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 37: break;
          case 15:
            { return token(yytext(), "OP_DECREMENTO", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 16:
            { return token(yytext(), "ERROR_LEXICO_3", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 17:
            { return token(yytext(), "ERROR_LEXICO_4", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 18:
            { return token(yytext(), "PALABRA_RES", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 19:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 20:
            { return token(yytext(), "ERROR_LEXICO_8", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 21:
            { /*ignorar*/
            }
            // fall through
          case 44: break;
          case 22:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 23:
            { return token(yytext(), "ERROR_LEXICO_2", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
