// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\3\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\3\26\1\0\1\27\1\30"+
    "\1\31\1\30\2\0\2\32\1\33\1\34\1\35\12\32"+
    "\1\36\7\32\2\37\1\32\3\0\1\6\1\40\1\0"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\32\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\7\1\73\7\0\1\3\73\0"+
    "\1\74\7\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\6\0\1\74\1\0\1\74\4\0\1\74\7\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\6\0"+
    "\1\74\1\0\1\74\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\3\1\5\1\6"+
    "\2\4\1\7\2\4\6\10\1\11\1\12\1\13\3\14"+
    "\1\15\23\14\1\16\1\17\1\12\1\13\1\20\1\21"+
    "\1\0\1\2\5\10\26\15\1\22\33\15\1\23\1\15"+
    "\2\0\1\10\3\24\2\15\1\25\21\15\1\26\4\15"+
    "\1\27\5\15\1\30\24\15\1\31\1\15\1\0\1\2"+
    "\2\24\7\15\1\32\13\15\1\33\15\15\1\34\13\15"+
    "\1\35\4\15\1\25\6\15\1\36\24\15\1\37\22\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\172\0\267\0\75\0\75\0\75"+
    "\0\75\0\364\0\u0131\0\75\0\u016e\0\u01ab\0\u01e8\0\u0225"+
    "\0\u0262\0\u029f\0\u02dc\0\u0319\0\75\0\267\0\267\0\u0356"+
    "\0\u0393\0\u03d0\0\u0356\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0356\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u0356\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u0a02\0\u16e0\0\u16a3\0\u171d\0\u175a\0\u0356"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942"+
    "\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u0356\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u0356\0\u1c98"+
    "\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u0356\0\u1dc9\0\u1e06\0\u1e43"+
    "\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u0356\0\u228d\0\u22ca\0\u1629\0\75\0\u2307\0\u2344"+
    "\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u0356\0\u24ef"+
    "\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7"+
    "\0\u2714\0\u2751\0\u0356\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u0356\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15"+
    "\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u0356\0\u2d46\0\u2d83\0\u2dc0"+
    "\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8"+
    "\0\u0356\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153"+
    "\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b"+
    "\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u0356\0\u34a9\0\u34e6"+
    "\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce"+
    "\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\3\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\30\1\32\2\30\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\30\1\43\1\30\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\30\1\56\3\30\1\57\1\60\1\33\77\0"+
    "\1\3\123\0\1\61\74\0\1\62\56\0\1\63\1\0"+
    "\1\62\74\0\1\64\13\0\1\62\55\0\1\65\3\0"+
    "\1\66\12\0\1\62\62\0\10\67\65\0\10\24\65\0"+
    "\5\24\1\70\2\71\65\0\10\71\65\0\5\71\1\72"+
    "\2\73\65\0\10\73\65\0\10\33\3\0\40\33\2\0"+
    "\1\33\17\0\10\33\3\0\24\33\1\74\13\33\2\0"+
    "\1\33\17\0\10\33\3\0\23\33\1\75\14\33\2\0"+
    "\1\33\17\0\10\33\3\0\12\33\1\76\22\33\1\77"+
    "\2\33\2\0\1\33\17\0\10\33\3\0\7\33\1\100"+
    "\3\33\1\101\10\33\1\102\2\33\1\103\6\33\1\104"+
    "\1\33\2\0\1\33\17\0\10\33\3\0\7\33\1\105"+
    "\6\33\1\106\2\33\1\107\2\33\1\110\13\33\2\0"+
    "\1\33\17\0\10\33\3\0\17\33\1\111\4\33\1\112"+
    "\13\33\2\0\1\33\17\0\10\33\3\0\21\33\1\113"+
    "\1\33\1\114\14\33\2\0\1\33\17\0\10\33\3\0"+
    "\7\33\1\115\7\33\1\116\4\33\1\117\2\33\1\120"+
    "\10\33\2\0\1\33\17\0\10\33\3\0\13\33\1\121"+
    "\24\33\2\0\1\33\17\0\10\33\3\0\14\33\1\122"+
    "\5\33\1\123\1\124\14\33\2\0\1\33\17\0\10\33"+
    "\3\0\13\33\1\125\3\33\1\126\20\33\2\0\1\33"+
    "\17\0\10\33\3\0\13\33\1\127\16\33\1\130\5\33"+
    "\2\0\1\33\17\0\10\33\3\0\13\33\1\131\16\33"+
    "\1\132\5\33\2\0\1\33\17\0\10\33\3\0\10\33"+
    "\1\133\27\33\2\0\1\33\17\0\10\33\3\0\21\33"+
    "\1\134\2\33\1\135\2\33\1\136\2\33\1\137\5\33"+
    "\2\0\1\33\17\0\10\33\3\0\32\33\1\140\5\33"+
    "\2\0\1\33\17\0\10\33\3\0\7\33\1\141\3\33"+
    "\1\142\3\33\1\143\4\33\1\144\13\33\2\0\1\33"+
    "\17\0\10\33\3\0\7\33\1\145\1\33\1\146\1\33"+
    "\1\147\2\33\1\150\1\151\11\33\1\152\2\33\1\153"+
    "\3\33\2\0\1\33\17\0\10\33\3\0\16\33\1\154"+
    "\10\33\1\155\10\33\2\0\1\33\17\0\10\33\3\0"+
    "\25\33\1\156\12\33\2\0\1\33\17\0\10\33\3\0"+
    "\16\33\1\157\21\33\2\0\1\33\12\160\1\161\62\160"+
    "\2\66\1\3\1\66\1\4\70\66\17\0\10\162\65\0"+
    "\6\73\2\163\65\0\10\163\65\0\5\163\1\164\2\165"+
    "\65\0\10\165\65\0\10\33\3\0\23\33\1\166\14\33"+
    "\2\0\1\33\17\0\10\33\3\0\13\33\1\167\24\33"+
    "\2\0\1\33\17\0\10\33\3\0\12\33\1\170\25\33"+
    "\2\0\1\33\17\0\10\33\3\0\24\33\1\171\13\33"+
    "\2\0\1\33\17\0\10\33\3\0\11\33\1\172\26\33"+
    "\2\0\1\33\17\0\10\33\3\0\15\33\1\173\22\33"+
    "\2\0\1\33\17\0\10\33\3\0\24\33\1\174\13\33"+
    "\2\0\1\33\17\0\10\33\3\0\13\33\1\175\24\33"+
    "\2\0\1\33\17\0\10\33\3\0\31\33\1\176\6\33"+
    "\2\0\1\33\17\0\10\33\3\0\30\33\1\177\1\200"+
    "\6\33\2\0\1\33\17\0\10\33\3\0\7\33\1\201"+
    "\30\33\2\0\1\33\17\0\10\33\3\0\7\33\1\202"+
    "\30\33\2\0\1\33\17\0\10\33\3\0\23\33\1\203"+
    "\14\33\2\0\1\33\17\0\10\33\3\0\22\33\1\204"+
    "\15\33\2\0\1\33\17\0\10\33\3\0\34\33\1\205"+
    "\3\33\2\0\1\33\17\0\10\33\3\0\30\33\1\206"+
    "\7\33\2\0\1\33\17\0\10\33\3\0\13\33\1\207"+
    "\24\33\2\0\1\33\17\0\10\33\3\0\21\33\1\210"+
    "\16\33\2\0\1\33\17\0\10\33\3\0\23\33\1\211"+
    "\14\33\2\0\1\33\17\0\10\33\3\0\27\33\1\212"+
    "\10\33\2\0\1\33\17\0\10\33\3\0\24\33\1\213"+
    "\13\33\2\0\1\33\17\0\10\33\3\0\31\33\1\214"+
    "\6\33\2\0\1\33\17\0\10\33\3\0\7\33\1\215"+
    "\15\33\1\216\12\33\2\0\1\33\17\0\10\33\3\0"+
    "\31\33\1\217\6\33\2\0\1\33\17\0\10\33\3\0"+
    "\14\33\1\220\16\33\1\221\4\33\2\0\1\33\17\0"+
    "\10\33\3\0\14\33\1\222\13\33\1\124\7\33\2\0"+
    "\1\33\17\0\10\33\3\0\31\33\1\223\6\33\2\0"+
    "\1\33\17\0\10\33\3\0\30\33\1\224\7\33\2\0"+
    "\1\33\17\0\10\33\3\0\34\33\1\225\3\33\2\0"+
    "\1\33\17\0\10\33\3\0\21\33\1\226\16\33\2\0"+
    "\1\33\17\0\10\33\3\0\30\33\1\227\7\33\2\0"+
    "\1\33\17\0\10\33\3\0\7\33\1\230\30\33\2\0"+
    "\1\33\17\0\10\33\3\0\25\33\1\170\2\33\1\231"+
    "\7\33\2\0\1\33\17\0\10\33\3\0\17\33\1\232"+
    "\20\33\2\0\1\33\17\0\10\33\3\0\30\33\1\233"+
    "\7\33\2\0\1\33\17\0\10\33\3\0\13\33\1\234"+
    "\24\33\2\0\1\33\17\0\10\33\3\0\23\33\1\235"+
    "\14\33\2\0\1\33\17\0\10\33\3\0\7\33\1\236"+
    "\21\33\1\237\6\33\2\0\1\33\17\0\10\33\3\0"+
    "\15\33\1\240\22\33\2\0\1\33\17\0\10\33\3\0"+
    "\31\33\1\241\6\33\2\0\1\33\17\0\10\33\3\0"+
    "\33\33\1\242\4\33\2\0\1\33\17\0\10\33\3\0"+
    "\27\33\1\243\10\33\2\0\1\33\17\0\10\33\3\0"+
    "\31\33\1\170\6\33\2\0\1\33\17\0\10\33\3\0"+
    "\24\33\1\244\13\33\2\0\1\33\17\0\10\33\3\0"+
    "\37\33\1\245\2\0\1\33\17\0\10\33\3\0\7\33"+
    "\1\246\30\33\2\0\1\33\17\0\10\33\3\0\17\33"+
    "\1\247\20\33\2\0\1\33\17\0\10\33\3\0\17\33"+
    "\1\250\20\33\2\0\1\33\17\0\10\33\3\0\32\33"+
    "\1\251\3\33\1\252\1\33\2\0\1\33\17\0\10\33"+
    "\3\0\17\33\1\253\20\33\2\0\1\33\12\160\1\254"+
    "\74\160\1\254\3\160\1\255\56\160\17\0\10\256\65\0"+
    "\3\165\1\257\4\256\65\0\10\33\3\0\31\33\1\260"+
    "\6\33\2\0\1\33\17\0\10\33\3\0\22\33\1\261"+
    "\15\33\2\0\1\33\17\0\10\33\3\0\21\33\1\262"+
    "\16\33\2\0\1\33\17\0\10\33\3\0\20\33\1\263"+
    "\17\33\2\0\1\33\17\0\10\33\3\0\17\33\1\264"+
    "\20\33\2\0\1\33\17\0\10\33\3\0\21\33\1\265"+
    "\16\33\2\0\1\33\17\0\10\33\3\0\7\33\1\266"+
    "\30\33\2\0\1\33\17\0\10\33\3\0\13\33\1\217"+
    "\24\33\2\0\1\33\17\0\10\33\3\0\13\33\1\267"+
    "\24\33\2\0\1\33\17\0\10\33\3\0\11\33\1\270"+
    "\26\33\2\0\1\33\17\0\10\33\3\0\27\33\1\217"+
    "\10\33\2\0\1\33\17\0\10\33\3\0\30\33\1\271"+
    "\7\33\2\0\1\33\17\0\10\33\3\0\30\33\1\272"+
    "\7\33\2\0\1\33\17\0\10\33\3\0\13\33\1\273"+
    "\24\33\2\0\1\33\17\0\10\33\3\0\16\33\1\274"+
    "\4\33\1\156\14\33\2\0\1\33\17\0\10\33\3\0"+
    "\13\33\1\122\24\33\2\0\1\33\17\0\10\33\3\0"+
    "\22\33\1\275\15\33\2\0\1\33\17\0\10\33\3\0"+
    "\30\33\1\251\7\33\2\0\1\33\17\0\10\33\3\0"+
    "\17\33\1\137\20\33\2\0\1\33\17\0\10\33\3\0"+
    "\22\33\1\225\15\33\2\0\1\33\17\0\10\33\3\0"+
    "\4\33\1\276\33\33\2\0\1\33\17\0\10\33\3\0"+
    "\15\33\1\245\22\33\2\0\1\33\17\0\10\33\3\0"+
    "\24\33\1\277\13\33\2\0\1\33\17\0\10\33\3\0"+
    "\31\33\1\156\6\33\2\0\1\33\17\0\10\33\3\0"+
    "\13\33\1\300\24\33\2\0\1\33\17\0\10\33\3\0"+
    "\13\33\1\250\24\33\2\0\1\33\17\0\10\33\3\0"+
    "\16\33\1\301\21\33\2\0\1\33\17\0\10\33\3\0"+
    "\17\33\1\302\20\33\2\0\1\33\17\0\10\33\3\0"+
    "\21\33\1\303\16\33\2\0\1\33\17\0\10\33\3\0"+
    "\31\33\1\304\6\33\2\0\1\33\17\0\10\33\3\0"+
    "\31\33\1\305\4\33\1\306\1\33\2\0\1\33\17\0"+
    "\10\33\3\0\17\33\1\307\20\33\2\0\1\33\17\0"+
    "\10\33\3\0\23\33\1\310\14\33\2\0\1\33\17\0"+
    "\10\33\3\0\16\33\1\170\21\33\2\0\1\33\17\0"+
    "\10\33\3\0\32\33\1\176\5\33\2\0\1\33\17\0"+
    "\10\33\3\0\12\33\1\311\25\33\2\0\1\33\17\0"+
    "\10\33\3\0\12\33\1\312\25\33\2\0\1\33\17\0"+
    "\10\33\3\0\32\33\1\313\5\33\2\0\1\33\17\0"+
    "\10\33\3\0\16\33\1\220\21\33\2\0\1\33\17\0"+
    "\10\33\3\0\7\33\1\314\30\33\2\0\1\33\17\0"+
    "\10\33\3\0\13\33\1\315\24\33\2\0\1\33\17\0"+
    "\10\33\3\0\13\33\1\316\24\33\2\0\1\33\17\0"+
    "\10\33\3\0\34\33\1\170\3\33\2\0\1\33\17\0"+
    "\10\33\3\0\13\33\1\303\24\33\2\0\1\33\17\0"+
    "\10\33\3\0\11\33\1\317\15\33\1\147\10\33\2\0"+
    "\1\33\17\0\10\33\3\0\31\33\1\320\6\33\2\0"+
    "\1\33\17\0\10\33\3\0\30\33\1\303\7\33\2\0"+
    "\1\33\17\0\10\33\3\0\13\33\1\321\24\33\2\0"+
    "\1\33\17\0\10\33\3\0\21\33\1\322\16\33\2\0"+
    "\1\33\12\160\1\254\3\160\1\3\56\160\17\0\5\256"+
    "\70\0\10\33\3\0\27\33\1\323\10\33\2\0\1\33"+
    "\17\0\10\33\3\0\17\33\1\324\20\33\2\0\1\33"+
    "\17\0\2\33\1\325\5\33\3\0\40\33\2\0\1\33"+
    "\17\0\10\33\3\0\3\33\1\326\11\33\1\327\22\33"+
    "\2\0\1\33\17\0\10\33\3\0\23\33\1\170\14\33"+
    "\2\0\1\33\17\0\10\33\3\0\13\33\1\330\24\33"+
    "\2\0\1\33\17\0\10\33\3\0\20\33\1\267\17\33"+
    "\2\0\1\33\17\0\10\33\3\0\16\33\1\252\21\33"+
    "\2\0\1\33\17\0\10\33\3\0\30\33\1\225\7\33"+
    "\2\0\1\33\17\0\10\33\3\0\31\33\1\331\6\33"+
    "\2\0\1\33\17\0\10\33\3\0\23\33\1\332\14\33"+
    "\2\0\1\33\17\0\10\33\3\0\17\33\1\333\20\33"+
    "\2\0\1\33\17\0\10\33\3\0\17\33\1\222\20\33"+
    "\2\0\1\33\17\0\10\33\3\0\24\33\1\334\13\33"+
    "\2\0\1\33\17\0\10\33\3\0\27\33\1\225\10\33"+
    "\2\0\1\33\17\0\10\33\3\0\21\33\1\335\16\33"+
    "\2\0\1\33\17\0\10\33\3\0\24\33\1\76\13\33"+
    "\2\0\1\33\17\0\10\33\3\0\11\33\1\335\26\33"+
    "\2\0\1\33\17\0\10\33\3\0\7\33\1\336\30\33"+
    "\2\0\1\33\17\0\10\33\3\0\14\33\1\337\23\33"+
    "\2\0\1\33\17\0\10\33\3\0\13\33\1\340\24\33"+
    "\2\0\1\33\17\0\10\33\3\0\31\33\1\341\6\33"+
    "\2\0\1\33\17\0\10\33\3\0\31\33\1\342\6\33"+
    "\2\0\1\33\17\0\10\33\3\0\24\33\1\343\13\33"+
    "\2\0\1\33\17\0\10\33\3\0\6\33\1\344\31\33"+
    "\2\0\1\33\17\0\10\33\3\0\27\33\1\264\10\33"+
    "\2\0\1\33\17\0\10\33\3\0\31\33\1\345\6\33"+
    "\2\0\1\33\17\0\10\33\3\0\6\33\1\346\31\33"+
    "\2\0\1\33\17\0\10\33\3\0\13\33\1\347\24\33"+
    "\2\0\1\33\17\0\10\33\3\0\20\33\1\217\17\33"+
    "\2\0\1\33\17\0\10\33\3\0\11\33\1\350\26\33"+
    "\2\0\1\33\17\0\10\33\3\0\13\33\1\351\24\33"+
    "\2\0\1\33\17\0\10\33\3\0\24\33\1\352\13\33"+
    "\2\0\1\33\17\0\10\33\3\0\13\33\1\353\24\33"+
    "\2\0\1\33\17\0\10\33\3\0\2\33\1\335\35\33"+
    "\2\0\1\33\17\0\10\33\3\0\21\33\1\354\16\33"+
    "\2\0\1\33\17\0\10\33\3\0\27\33\1\355\10\33"+
    "\2\0\1\33\17\0\10\33\3\0\7\33\1\356\30\33"+
    "\2\0\1\33\17\0\10\33\3\0\7\33\1\357\30\33"+
    "\2\0\1\33\17\0\10\33\3\0\30\33\1\360\7\33"+
    "\2\0\1\33\17\0\10\33\3\0\21\33\1\361\16\33"+
    "\2\0\1\33\17\0\10\33\3\0\30\33\1\362\7\33"+
    "\2\0\1\33\17\0\10\33\3\0\11\33\1\363\26\33"+
    "\2\0\1\33\17\0\10\33\3\0\24\33\1\364\13\33"+
    "\2\0\1\33\17\0\10\33\3\0\27\33\1\335\10\33"+
    "\2\0\1\33\17\0\10\33\3\0\17\33\1\365\20\33"+
    "\2\0\1\33\17\0\10\33\3\0\6\33\1\366\31\33"+
    "\2\0\1\33\17\0\10\33\3\0\22\33\1\170\15\33"+
    "\2\0\1\33\17\0\10\33\3\0\10\33\1\173\11\33"+
    "\1\367\6\33\1\370\6\33\2\0\1\33\17\0\10\33"+
    "\3\0\13\33\1\170\24\33\2\0\1\33\17\0\10\33"+
    "\3\0\10\33\1\173\27\33\2\0\1\33\17\0\10\33"+
    "\3\0\23\33\1\335\14\33\2\0\1\33\17\0\10\33"+
    "\3\0\16\33\1\267\21\33\2\0\1\33\17\0\10\33"+
    "\3\0\21\33\1\371\16\33\2\0\1\33\17\0\10\33"+
    "\3\0\30\33\1\335\7\33\2\0\1\33\17\0\10\33"+
    "\3\0\13\33\1\372\24\33\2\0\1\33\17\0\10\33"+
    "\3\0\24\33\1\373\13\33\2\0\1\33\17\0\10\33"+
    "\3\0\23\33\1\217\14\33\2\0\1\33\17\0\10\33"+
    "\3\0\23\33\1\374\14\33\2\0\1\33\17\0\10\33"+
    "\3\0\17\33\1\375\20\33\2\0\1\33\17\0\10\33"+
    "\3\0\13\33\1\376\24\33\2\0\1\33\17\0\10\33"+
    "\3\0\17\33\1\377\20\33\2\0\1\33\17\0\10\33"+
    "\3\0\21\33\1\324\16\33\2\0\1\33\17\0\10\33"+
    "\3\0\27\33\1\u0100\10\33\2\0\1\33\17\0\10\33"+
    "\3\0\24\33\1\u0101\13\33\2\0\1\33\17\0\10\33"+
    "\3\0\11\33\1\u0102\26\33\2\0\1\33\17\0\10\33"+
    "\3\0\15\33\1\170\7\33\1\u0103\12\33\2\0\1\33"+
    "\17\0\10\33\3\0\13\33\1\u0104\24\33\2\0\1\33"+
    "\17\0\10\33\3\0\21\33\1\u0105\16\33\2\0\1\33"+
    "\17\0\10\33\3\0\22\33\1\u0106\15\33\2\0\1\33"+
    "\17\0\10\33\3\0\32\33\1\u0107\5\33\2\0\1\33"+
    "\17\0\10\33\3\0\31\33\1\303\6\33\2\0\1\33"+
    "\17\0\10\33\3\0\24\33\1\u0108\13\33\2\0\1\33"+
    "\17\0\10\33\3\0\31\33\1\u0109\6\33\2\0\1\33"+
    "\17\0\10\33\3\0\22\33\1\335\15\33\2\0\1\33"+
    "\17\0\10\33\3\0\23\33\1\u010a\14\33\2\0\1\33"+
    "\17\0\10\33\3\0\24\33\1\347\13\33\2\0\1\33"+
    "\17\0\3\33\1\170\4\33\3\0\40\33\2\0\1\33"+
    "\17\0\10\33\3\0\11\33\1\170\26\33\2\0\1\33"+
    "\17\0\10\33\3\0\13\33\1\u010b\24\33\2\0\1\33"+
    "\17\0\10\33\3\0\13\33\1\u010c\24\33\2\0\1\33"+
    "\17\0\10\33\3\0\23\33\1\u010d\14\33\2\0\1\33"+
    "\17\0\10\33\3\0\23\33\1\353\14\33\2\0\1\33"+
    "\17\0\10\33\3\0\17\33\1\u010e\20\33\2\0\1\33"+
    "\17\0\10\33\3\0\5\33\1\335\32\33\2\0\1\33"+
    "\17\0\10\33\3\0\27\33\1\u010f\10\33\2\0\1\33"+
    "\17\0\10\33\3\0\23\33\1\u0110\14\33\2\0\1\33"+
    "\17\0\10\33\3\0\12\33\1\335\25\33\2\0\1\33"+
    "\17\0\10\33\3\0\24\33\1\264\13\33\2\0\1\33"+
    "\17\0\10\33\3\0\30\33\1\156\7\33\2\0\1\33"+
    "\17\0\10\33\3\0\31\33\1\335\6\33\2\0\1\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14579];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\4\11\2\1\1\11\10\1\1\11"+
    "\31\1\6\11\1\0\72\1\2\0\72\1\1\0\1\1"+
    "\1\11\142\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 32: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 33: break;
          case 3:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 34: break;
          case 4:
            { return token(yytext(), "OP_ARITMETICO", yyline, yycolumn);
            }
            // fall through
          case 35: break;
          case 5:
            { return token(yytext(), "DEL_PAR_A", yyline, yycolumn);
            }
            // fall through
          case 36: break;
          case 6:
            { return token(yytext(), "DEL_PAR_C", yyline, yycolumn);
            }
            // fall through
          case 37: break;
          case 7:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 8:
            { return token(yytext(), "BYTE", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 9:
            { return token(yytext(), "PUNTO_COMA", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 10:
            { return token(yytext(), "OP_COMPARACION", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 11:
            { return token (yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 12:
            { return token(yytext(), "CHAR", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 13:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 14:
            { return token(yytext(), "DEL_LLAVE_A", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 15:
            { return token(yytext(), "DEL_LLAVE_C", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 16:
            { return token(yytext(), "OP_INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 17:
            { return token(yytext(), "OP_DECREMENTO", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 18:
            { return token(yytext(), "ES_IF_ELSE", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 19:
            { return token(yytext(), "CONTROLADORES", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 20:
            { return token(yytext(), "INT", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 21:
            { return token(yytext(), "MET_FUNC", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 22:
            { return token(yytext(), "ES_FOR", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 23:
            { return token(yytext(), "TIPO_DATO", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 24:
            { return token(yytext(), "IMPORT_CREACION", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 25:
            { return token(yytext(), "ES_TRY_CATCH", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 26:
            { return token(yytext(), "ES_SWITCH", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 27:
            { return token(yytext(), "VALOR_ESPECIAL", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 28:
            { return token(yytext(), "BOOLEAN", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 29:
            { return token(yytext(), "INTERF_GRAFICA", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 30:
            { return token(yytext(), "ES_WHILE", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 31:
            { return token(yytext(), "ES_DO_WHILE", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
