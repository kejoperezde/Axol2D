// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\3\31\1\0\1\32"+
    "\1\33\1\34\1\35\2\0\3\36\1\37\1\40\12\36"+
    "\1\41\7\36\1\42\1\43\1\36\1\44\1\0\1\45"+
    "\1\46\1\47\1\0\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\36\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\62\0\1\104\20\0\1\36\7\0\1\36\3\0\1\36"+
    "\3\0\1\36\1\0\1\36\6\0\1\36\1\0\1\36"+
    "\4\0\1\36\7\0\1\36\3\0\1\36\3\0\1\36"+
    "\1\0\1\36\6\0\1\36\1\0\1\36\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\5\1\6\1\7\1\2"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\6\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\23\25\1\31\1\32\1\33\1\2\1\1\1\4"+
    "\2\5\1\0\3\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\0\1\3\1\42\1\43\1\44\5\20\1\45\1\46"+
    "\1\47\1\50\25\25\1\51\33\25\1\52\1\25\1\53"+
    "\2\54\2\55\3\0\1\20\3\56\1\25\1\57\21\25"+
    "\1\60\4\25\1\61\6\25\1\62\3\25\1\63\13\25"+
    "\1\64\6\25\1\65\1\25\2\0\1\3\3\56\6\25"+
    "\1\66\1\67\1\25\1\55\5\25\1\70\1\71\3\25"+
    "\1\72\3\25\1\73\2\25\1\74\2\25\1\75\5\25"+
    "\1\76\10\25\1\77\1\100\3\25\1\101\1\102\1\25"+
    "\1\103\1\56\4\25\1\104\1\25\1\105\1\106\1\107"+
    "\5\25\1\110\2\25\1\111\1\25\1\112\1\113\1\25"+
    "\1\114\4\25\1\115\1\116\3\25\1\117\3\25\1\120"+
    "\1\121\1\25\1\122\1\25\1\123\10\25\1\124\1\25"+
    "\1\125\1\126\2\25\1\127\2\25\1\130\3\25\1\131"+
    "\1\132\1\25\1\133\1\134\3\25\1\135\3\25\1\136"+
    "\1\137\6\25\1\140\6\25\1\141\4\25\1\142\2\25"+
    "\1\143\1\144\1\145\1\146\6\25\1\147\1\150\1\151"+
    "\1\152\2\25\1\153\1\25\1\154\2\25\1\155\1\156"+
    "\1\157\25\25\1\160";

  private static int [] zzUnpackAction() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e"+
    "\0\u019e\0\u01e3\0\212\0\212\0\u0228\0\u026d\0\u019e\0\u02b2"+
    "\0\212\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495"+
    "\0\212\0\u04da\0\u051f\0\u0564\0\u05a9\0\212\0\212\0\u019e"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\212\0\u019e\0\212\0\u0b0d\0\u019e"+
    "\0\u019e\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u019e"+
    "\0\u019e\0\u019e\0\u019e\0\u019e\0\u0cf0\0\u0d35\0\212\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u019e\0\u019e"+
    "\0\u019e\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u0fa2"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u0fa2\0\u1c92\0\212\0\105\0\212"+
    "\0\105\0\212\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u0f18\0\u1deb"+
    "\0\u1da6\0\u1e30\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89"+
    "\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1"+
    "\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u1e30\0\u230a\0\u234f\0\u2394"+
    "\0\u23d9\0\u1e30\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\u1e30\0\u25bc\0\u2601\0\u2646\0\u1e30\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d"+
    "\0\u1e30\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u1e30"+
    "\0\u2b20\0\u2b65\0\u2baa\0\u1d1c\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2cbe\0\u2cbe\0\u2e5c"+
    "\0\u2cbe\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2cbe\0\u2cbe"+
    "\0\u2ffa\0\u303f\0\u3084\0\u2cbe\0\u30c9\0\u310e\0\u3153\0\u2cbe"+
    "\0\u3198\0\u31dd\0\u2cbe\0\u3222\0\u3267\0\u2cbe\0\u32ac\0\u32f1"+
    "\0\u3336\0\u337b\0\u33c0\0\u2cbe\0\u3405\0\u344a\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u2cbe\0\u2cbe\0\u362d\0\u3672"+
    "\0\u36b7\0\u2cbe\0\u2cbe\0\u36fc\0\u0dbf\0\u0dbf\0\u3741\0\u3786"+
    "\0\u37cb\0\u3810\0\u3741\0\u3855\0\u3741\0\u3741\0\u3741\0\u389a"+
    "\0\u38df\0\u3924\0\u3969\0\u39ae\0\u3741\0\u39f3\0\u3a38\0\u3741"+
    "\0\u3a7d\0\u3741\0\u3741\0\u3ac2\0\u3741\0\u3b07\0\u3b4c\0\u3b91"+
    "\0\u3bd6\0\u3c1b\0\u3741\0\u3c60\0\u3ca5\0\u3cea\0\u3741\0\u3d2f"+
    "\0\u3d74\0\u3db9\0\u3741\0\u3741\0\u3dfe\0\u3741\0\u3e43\0\u3e43"+
    "\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b"+
    "\0\u3e43\0\u40b0\0\u3e43\0\u3e43\0\u40f5\0\u413a\0\u3e43\0\u417f"+
    "\0\u41c4\0\u3e43\0\u4209\0\u424e\0\u4293\0\u3e43\0\u3e43\0\u42d8"+
    "\0\u3e43\0\u3e43\0\u431d\0\u4362\0\u43a7\0\u431d\0\u43ec\0\u4431"+
    "\0\u4476\0\u431d\0\u431d\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf"+
    "\0\u4614\0\u431d\0\u4659\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2"+
    "\0\u4728\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u4728\0\u490b\0\u4950"+
    "\0\u4728\0\u4728\0\u4728\0\u4728\0\u4995\0\u49da\0\u4a1f\0\u4a64"+
    "\0\u4aa9\0\u4aee\0\u4995\0\u4995\0\u4995\0\u4995\0\u4b33\0\u4b78"+
    "\0\u4b33\0\u4bbd\0\u4b33\0\u4c02\0\u4c47\0\u4c47\0\u4c47\0\u4c47"+
    "\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f"+
    "\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097"+
    "\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0\0\u51f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\3\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\6\35\1\36\1\37\1\40"+
    "\1\35\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\35\1\50\1\35\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\35\1\63\3\35"+
    "\1\64\1\65\1\66\1\67\2\2\4\0\1\2\2\0"+
    "\1\2\10\0\10\2\4\0\6\2\3\0\32\2\3\0"+
    "\1\2\107\0\1\4\107\0\1\70\1\0\2\70\3\0"+
    "\4\70\13\0\1\70\1\71\1\70\10\0\1\70\33\0"+
    "\1\70\2\0\1\2\1\72\3\73\1\0\1\2\2\0"+
    "\1\2\4\0\3\74\1\0\10\72\4\0\6\72\3\0"+
    "\32\72\3\0\1\2\5\0\1\70\1\0\2\70\3\0"+
    "\4\70\13\0\3\70\10\0\1\70\33\0\1\70\2\0"+
    "\1\2\1\75\1\76\1\77\1\76\1\0\1\2\2\0"+
    "\1\2\10\0\10\75\4\0\6\75\3\0\32\75\3\0"+
    "\1\2\5\0\1\70\1\0\2\70\3\0\4\70\13\0"+
    "\1\70\1\100\1\70\10\0\1\70\33\0\1\70\7\0"+
    "\1\70\1\0\2\70\3\0\1\70\1\101\2\70\13\0"+
    "\1\70\1\102\1\70\10\0\1\70\33\0\1\70\7\0"+
    "\1\70\1\0\2\70\3\0\3\70\1\103\13\0\1\70"+
    "\1\104\1\70\10\0\1\70\33\0\1\70\16\0\1\105"+
    "\4\0\1\106\12\0\1\107\47\0\1\110\2\111\4\0"+
    "\1\111\2\0\1\111\6\0\1\111\1\0\10\112\4\0"+
    "\6\111\3\0\32\111\3\0\3\111\4\0\1\111\2\0"+
    "\1\111\6\0\1\111\1\0\10\30\4\0\6\111\3\0"+
    "\32\111\3\0\3\111\4\0\1\111\2\0\1\111\6\0"+
    "\1\111\1\0\5\30\1\113\2\114\4\0\6\111\3\0"+
    "\32\111\3\0\3\111\4\0\1\111\2\0\1\111\6\0"+
    "\1\111\1\0\10\114\4\0\6\111\3\0\32\111\3\0"+
    "\3\111\4\0\1\111\2\0\1\111\6\0\1\111\1\0"+
    "\5\114\1\115\2\116\4\0\6\111\3\0\32\111\3\0"+
    "\3\111\4\0\1\111\2\0\1\111\6\0\1\111\1\0"+
    "\10\116\4\0\6\111\3\0\32\111\3\0\1\111\5\0"+
    "\1\70\1\0\2\70\3\0\4\70\13\0\1\70\1\117"+
    "\1\70\10\0\1\70\33\0\1\70\7\0\1\70\1\0"+
    "\2\70\3\0\4\70\13\0\1\70\1\120\1\70\10\0"+
    "\1\70\33\0\1\70\7\0\1\70\1\0\2\70\3\0"+
    "\4\70\13\0\1\70\1\121\1\70\10\0\1\70\33\0"+
    "\1\70\2\0\2\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\123\4\0\6\123\3\0\32\123\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\123\4\0\6\123\3\0"+
    "\4\123\1\124\22\123\1\125\2\123\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\123\4\0\6\123\3\0"+
    "\1\123\1\126\3\123\1\127\10\123\1\130\2\123\1\131"+
    "\6\123\1\132\1\123\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\123\4\0\6\123\3\0\1\123\1\133"+
    "\6\123\1\134\2\123\1\135\2\123\1\136\13\123\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\123\4\0"+
    "\6\123\3\0\11\123\1\137\4\123\1\140\13\123\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\123\4\0"+
    "\6\123\3\0\13\123\1\141\1\123\1\142\14\123\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\123\4\0"+
    "\6\123\3\0\1\123\1\143\7\123\1\144\4\123\1\145"+
    "\2\123\1\146\10\123\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\123\4\0\6\123\3\0\5\123\1\147"+
    "\24\123\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\123\4\0\6\123\3\0\6\123\1\150\5\123\1\151"+
    "\1\152\14\123\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\123\4\0\6\123\3\0\5\123\1\153\3\123"+
    "\1\154\20\123\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\123\4\0\6\123\3\0\5\123\1\155\16\123"+
    "\1\156\5\123\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\123\4\0\6\123\3\0\5\123\1\157\16\123"+
    "\1\160\5\123\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\123\4\0\6\123\3\0\2\123\1\161\27\123"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\123"+
    "\4\0\6\123\3\0\13\123\1\162\2\123\1\163\2\123"+
    "\1\164\2\123\1\165\5\123\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\123\4\0\6\123\3\0\24\123"+
    "\1\166\5\123\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\123\4\0\6\123\3\0\1\123\1\167\3\123"+
    "\1\170\3\123\1\171\4\123\1\172\13\123\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\123\4\0\6\123"+
    "\3\0\1\123\1\173\1\123\1\174\1\123\1\175\2\123"+
    "\1\176\1\177\11\123\1\200\2\123\1\201\3\123\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\123\4\0"+
    "\6\123\3\0\10\123\1\202\10\123\1\203\10\123\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\123\4\0"+
    "\6\123\3\0\17\123\1\204\12\123\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\123\4\0\6\123\3\0"+
    "\10\123\1\205\21\123\3\0\1\122\2\2\4\0\1\2"+
    "\2\0\1\2\7\0\1\206\10\2\4\0\6\2\3\0"+
    "\32\2\3\0\2\2\1\72\3\73\1\0\1\207\2\0"+
    "\1\2\4\0\3\74\1\0\10\72\4\0\6\72\3\0"+
    "\32\72\3\0\1\2\1\0\4\73\1\0\1\210\7\0"+
    "\3\74\1\0\10\73\4\0\6\73\3\0\32\73\5\0"+
    "\4\74\1\0\1\210\7\0\3\74\1\0\10\74\4\0"+
    "\6\74\3\0\32\74\4\0\2\2\4\0\1\2\2\0"+
    "\1\211\10\0\10\2\4\0\6\2\3\0\32\2\3\0"+
    "\1\2\11\0\1\212\75\0\1\76\6\0\1\212\107\0"+
    "\1\213\70\0\2\106\1\4\1\5\101\106\14\214\1\0"+
    "\67\214\1\215\2\111\4\0\1\111\2\0\1\111\6\0"+
    "\1\111\1\0\10\111\4\0\6\111\3\0\32\111\3\0"+
    "\3\111\4\0\1\111\2\0\1\111\6\0\1\111\1\0"+
    "\10\216\4\0\6\111\3\0\32\111\3\0\3\111\4\0"+
    "\1\111\2\0\1\111\6\0\1\111\1\0\6\116\2\217"+
    "\4\0\6\111\3\0\32\111\3\0\3\111\4\0\1\111"+
    "\2\0\1\111\6\0\1\111\1\0\10\217\4\0\6\111"+
    "\3\0\32\111\3\0\3\111\4\0\1\111\2\0\1\111"+
    "\6\0\1\111\1\0\5\217\1\220\2\221\4\0\6\111"+
    "\3\0\32\111\3\0\3\111\4\0\1\111\2\0\1\111"+
    "\6\0\1\111\1\0\10\221\4\0\6\111\3\0\32\111"+
    "\3\0\1\111\2\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\122\4\0\6\122\3\0\32\122\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\222\4\0\6\222\3\0"+
    "\32\222\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\222\4\0\6\222\3\0\4\222\1\223\25\222\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\222\4\0"+
    "\6\222\3\0\16\222\1\224\13\222\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\222\4\0\6\222\3\0"+
    "\3\222\1\225\26\222\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\222\4\0\6\222\3\0\7\222\1\226"+
    "\22\222\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\222\4\0\6\222\3\0\16\222\1\227\13\222\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\222\4\0"+
    "\6\222\3\0\5\222\1\230\24\222\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\222\4\0\6\222\3\0"+
    "\23\222\1\231\6\222\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\222\4\0\6\222\3\0\22\222\1\232"+
    "\1\233\6\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\1\222\1\234\30\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\1\222\1\235\30\222\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\222\4\0\6\222"+
    "\3\0\15\222\1\236\14\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\14\222"+
    "\1\237\15\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\26\222\1\240\3\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\22\222\1\241\7\222\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\222\4\0\6\222"+
    "\3\0\5\222\1\242\24\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\13\222"+
    "\1\243\16\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\15\222\1\244\14\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\21\222\1\245\10\222\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\222\4\0\6\222"+
    "\3\0\16\222\1\246\13\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\23\222"+
    "\1\247\6\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\1\222\1\250\15\222"+
    "\1\251\12\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\23\222\1\252\6\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\6\222\1\253\16\222\1\254\4\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\6\222\1\255\13\222\1\256\7\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\23\222\1\257\6\222\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\222\4\0\6\222"+
    "\3\0\22\222\1\260\7\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\26\222"+
    "\1\261\3\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\13\222\1\262\16\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\22\222\1\263\7\222\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\222\4\0\6\222"+
    "\3\0\1\222\1\264\30\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\17\222"+
    "\1\265\2\222\1\266\7\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\11\222"+
    "\1\267\20\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\22\222\1\270\7\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\5\222\1\271\24\222\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\222\4\0\6\222"+
    "\3\0\15\222\1\272\14\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\1\222"+
    "\1\273\21\222\1\274\6\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\7\222"+
    "\1\275\22\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\23\222\1\276\6\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\25\222\1\277\4\222\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\222\4\0\6\222"+
    "\3\0\21\222\1\300\10\222\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\222\4\0\6\222\3\0\23\222"+
    "\1\301\6\222\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\222\4\0\6\222\3\0\16\222\1\302\13\222"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\222"+
    "\4\0\6\222\3\0\31\222\1\303\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\222\4\0\6\222\3\0"+
    "\1\222\1\304\30\222\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\222\4\0\6\222\3\0\11\222\1\305"+
    "\20\222\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\222\4\0\6\222\3\0\11\222\1\306\20\222\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\222\4\0"+
    "\6\222\3\0\24\222\1\307\3\222\1\310\1\222\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\222\4\0"+
    "\6\222\3\0\11\222\1\311\20\222\3\0\1\122\14\213"+
    "\1\312\70\213\104\214\1\313\21\214\1\314\62\214\1\313"+
    "\2\111\4\0\1\111\2\0\1\111\6\0\1\111\1\0"+
    "\10\315\4\0\6\111\3\0\32\111\3\0\3\111\4\0"+
    "\1\111\2\0\1\111\6\0\1\111\1\0\3\316\1\317"+
    "\4\315\4\0\6\111\3\0\32\111\3\0\1\111\2\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\320\4\0\6\320"+
    "\3\0\32\320\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\320\4\0\6\320\3\0\13\320\1\321\16\320"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\320"+
    "\4\0\6\320\3\0\12\320\1\322\17\320\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\320\4\0\6\320"+
    "\3\0\11\320\1\323\20\320\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\320\4\0\6\320\3\0\13\320"+
    "\1\324\16\320\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\320\4\0\6\320\3\0\1\320\1\325\30\320"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\320"+
    "\4\0\6\320\3\0\5\320\1\326\24\320\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\320\4\0\6\320"+
    "\3\0\5\320\1\327\24\320\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\320\4\0\6\320\3\0\3\320"+
    "\1\330\26\320\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\320\4\0\6\320\3\0\21\320\1\331\10\320"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\320"+
    "\4\0\6\320\3\0\22\320\1\332\7\320\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\320\4\0\6\320"+
    "\3\0\22\320\1\333\1\334\6\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\5\320\1\335\24\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\10\320\1\336"+
    "\4\320\1\337\14\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\5\320\1\340"+
    "\24\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\6\320\3\0\14\320\1\341\15\320\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\320\4\0"+
    "\6\320\3\0\22\320\1\342\7\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\11\320\1\343\20\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\14\320\1\344"+
    "\15\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\3\320\1\345\2\320\3\0\32\320\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\320\4\0"+
    "\6\320\3\0\7\320\1\346\22\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\16\320\1\347\13\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\23\320\1\350"+
    "\6\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\6\320\3\0\5\320\1\351\24\320\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\320\4\0"+
    "\6\320\3\0\5\320\1\352\24\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\23\320\1\353\6\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\10\320\1\354"+
    "\21\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\6\320\3\0\11\320\1\355\20\320\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\320\4\0"+
    "\6\320\3\0\13\320\1\356\16\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\23\320\1\357\6\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\23\320\1\360"+
    "\4\320\1\361\1\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\11\320\1\362"+
    "\20\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\6\320\3\0\15\320\1\363\14\320\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\320\4\0"+
    "\6\320\3\0\10\320\1\364\21\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\24\320\1\365\5\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\4\320\1\366"+
    "\25\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\6\320\3\0\4\320\1\367\25\320\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\320\4\0"+
    "\6\320\3\0\24\320\1\370\5\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\10\320\1\371\21\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\1\320\1\372"+
    "\30\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\6\320\3\0\5\320\1\373\24\320\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\320\4\0"+
    "\6\320\3\0\5\320\1\374\24\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\26\320\1\375\3\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\5\320\1\376"+
    "\24\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\6\320\3\0\3\320\1\377\15\320\1\u0100"+
    "\10\320\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\320\4\0\6\320\3\0\23\320\1\u0101\6\320\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\320\4\0"+
    "\6\320\3\0\22\320\1\u0102\7\320\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\320\4\0\6\320\3\0"+
    "\5\320\1\u0103\24\320\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\320\4\0\6\320\3\0\13\320\1\u0104"+
    "\16\320\3\0\1\122\14\213\1\312\4\213\1\4\63\213"+
    "\21\214\1\4\62\214\1\313\2\111\4\0\1\111\2\0"+
    "\1\111\6\0\1\111\1\0\10\u0105\4\0\6\111\3\0"+
    "\32\111\3\0\3\111\4\0\1\111\2\0\1\111\6\0"+
    "\1\111\1\0\10\u0106\4\0\6\111\3\0\32\111\3\0"+
    "\3\111\4\0\1\111\2\0\1\111\6\0\1\111\1\0"+
    "\6\315\2\u0105\4\0\6\111\3\0\32\111\3\0\1\111"+
    "\2\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\32\u0107\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\2\u0107\1\u0108\5\u0107\4\0\6\u0107\3\0"+
    "\32\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\2\u0107\1\u0109\3\u0107\3\0\7\u0107\1\u010a"+
    "\22\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\15\u0107\1\u010b\14\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\5\u0107\1\u010c\24\u0107\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0"+
    "\12\u0107\1\u010d\17\u0107\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u0107\4\0\6\u0107\3\0\10\u0107\1\u010e"+
    "\21\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\22\u0107\1\u010f\7\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\23\u0107\1\u0110\6\u0107\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0"+
    "\21\u0107\1\u0111\10\u0107\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u0107\4\0\6\u0107\3\0\15\u0107\1\u0112"+
    "\14\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\11\u0107\1\u0113\20\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\11\u0107\1\u0114\20\u0107\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0"+
    "\5\u0107\1\u0115\24\u0107\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u0107\4\0\6\u0107\3\0\22\u0107\1\u0116"+
    "\7\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\16\u0107\1\u0117\13\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\5\u0107\1\u0118\24\u0107\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0"+
    "\21\u0107\1\u0119\10\u0107\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u0107\4\0\6\u0107\3\0\13\u0107\1\u011a"+
    "\16\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\22\u0107\1\u011b\7\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\16\u0107\1\u011c\13\u0107\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0"+
    "\3\u0107\1\u011d\26\u0107\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u0107\4\0\6\u0107\3\0\1\u0107\1\u011e"+
    "\30\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\6\u0107\1\u011f\23\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\5\u0107\1\u0120\24\u0107\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0"+
    "\23\u0107\1\u0121\6\u0107\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u0107\4\0\6\u0107\3\0\23\u0107\1\u0122"+
    "\6\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\5\u0107\1\u0123\24\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\16\u0107\1\u0124\13\u0107\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0"+
    "\1\u0125\31\u0107\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u0107\4\0\6\u0107\3\0\21\u0107\1\u0126\10\u0107"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107"+
    "\4\0\6\u0107\3\0\23\u0107\1\u0127\6\u0107\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107"+
    "\3\0\23\u0107\1\u0128\6\u0107\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0\1\u0129"+
    "\31\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\5\u0107\1\u012a\24\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u0107\4\0"+
    "\6\u0107\3\0\12\u0107\1\u012b\17\u0107\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u0107\4\0\6\u0107\3\0"+
    "\23\u0107\1\u012c\6\u0107\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u0107\4\0\6\u0107\3\0\3\u0107\1\u012d"+
    "\26\u0107\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u0107\4\0\6\u0107\3\0\5\u0107\1\u012e\24\u0107\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u012f\4\0"+
    "\6\u012f\3\0\32\u012f\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u012f\4\0\1\u012f\1\u0130\4\u012f\3\0"+
    "\32\u012f\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u012f\4\0\6\u012f\3\0\13\u012f\1\u0131\16\u012f\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u012f\4\0"+
    "\6\u012f\3\0\21\u012f\1\u0132\10\u012f\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u012f\4\0\6\u012f\3\0"+
    "\1\u012f\1\u0133\30\u012f\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u012f\4\0\6\u012f\3\0\1\u012f\1\u0134"+
    "\30\u012f\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u012f\4\0\6\u012f\3\0\16\u012f\1\u0135\13\u012f\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u012f\4\0"+
    "\6\u012f\3\0\22\u012f\1\u0136\7\u012f\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u012f\4\0\6\u012f\3\0"+
    "\13\u012f\1\u0137\16\u012f\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u012f\4\0\6\u012f\3\0\5\u012f\1\u0138"+
    "\24\u012f\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u012f\4\0\6\u012f\3\0\10\u012f\1\u0139\21\u012f\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u012f\4\0"+
    "\6\u012f\3\0\22\u012f\1\u013a\7\u012f\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u012f\4\0\6\u012f\3\0"+
    "\23\u012f\1\u013b\6\u012f\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u012f\4\0\6\u012f\3\0\4\u012f\1\u013c"+
    "\25\u012f\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u012f\4\0\6\u012f\3\0\3\u012f\1\u013d\26\u012f\3\0"+
    "\3\122\4\0\1\122\2\0\1\122\10\0\10\u012f\4\0"+
    "\6\u012f\3\0\16\u012f\1\u013e\13\u012f\3\0\3\122\4\0"+
    "\1\122\2\0\1\122\10\0\10\u012f\4\0\6\u012f\3\0"+
    "\21\u012f\1\u013f\10\u012f\3\0\3\122\4\0\1\122\2\0"+
    "\1\122\10\0\10\u012f\4\0\6\u012f\3\0\11\u012f\1\u0140"+
    "\20\u012f\3\0\3\122\4\0\1\122\2\0\1\122\10\0"+
    "\10\u012f\4\0\6\u012f\3\0\1\u0141\31\u012f\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u012f\4\0\6\u012f"+
    "\3\0\14\u012f\1\u0142\15\u012f\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u012f\4\0\6\u012f\3\0\2\u012f"+
    "\1\u0143\11\u012f\1\u0144\6\u012f\1\u0145\6\u012f\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u012f\4\0\6\u012f"+
    "\3\0\15\u012f\1\u0146\14\u012f\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u012f\4\0\6\u012f\3\0\5\u012f"+
    "\1\u0147\24\u012f\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u012f\4\0\6\u012f\3\0\2\u012f\1\u0148\27\u012f"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u012f"+
    "\4\0\6\u012f\3\0\15\u012f\1\u0149\14\u012f\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u012f\4\0\6\u012f"+
    "\3\0\10\u012f\1\u014a\21\u012f\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u014b\4\0\6\u014b\3\0\32\u014b"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u014b"+
    "\4\0\6\u014b\3\0\5\u014b\1\u014c\24\u014b\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u014b\4\0\6\u014b"+
    "\3\0\16\u014b\1\u014d\13\u014b\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u014b\4\0\6\u014b\3\0\15\u014b"+
    "\1\u014e\14\u014b\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u014b\4\0\6\u014b\3\0\15\u014b\1\u014f\14\u014b"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u014b"+
    "\4\0\6\u014b\3\0\13\u014b\1\u0150\16\u014b\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u014b\4\0\6\u014b"+
    "\3\0\11\u014b\1\u0151\20\u014b\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u014b\4\0\6\u014b\3\0\5\u014b"+
    "\1\u0152\24\u014b\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u014b\4\0\6\u014b\3\0\22\u014b\1\u0153\7\u014b"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u014b"+
    "\4\0\6\u014b\3\0\11\u014b\1\u0154\20\u014b\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u014b\4\0\6\u014b"+
    "\3\0\13\u014b\1\u0155\16\u014b\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u014b\4\0\6\u014b\3\0\21\u014b"+
    "\1\u0156\10\u014b\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u014b\4\0\6\u014b\3\0\16\u014b\1\u0157\13\u014b"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u014b"+
    "\4\0\6\u014b\3\0\3\u014b\1\u0158\26\u014b\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u014b\4\0\6\u014b"+
    "\3\0\11\u014b\1\u0159\20\u014b\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u014b\4\0\6\u014b\3\0\7\u014b"+
    "\1\u015a\7\u014b\1\u015b\12\u014b\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u014b\4\0\6\u014b\3\0\5\u014b"+
    "\1\u015c\24\u014b\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u014b\4\0\6\u014b\3\0\11\u014b\1\u015d\20\u014b"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u015e"+
    "\4\0\6\u015e\3\0\32\u015e\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u015e\4\0\6\u015e\3\0\14\u015e"+
    "\1\u015f\15\u015e\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u015e\4\0\6\u015e\3\0\24\u015e\1\u0160\5\u015e"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u015e"+
    "\4\0\6\u015e\3\0\23\u015e\1\u0161\6\u015e\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u015e\4\0\6\u015e"+
    "\3\0\13\u015e\1\u0162\16\u015e\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u015e\4\0\6\u015e\3\0\16\u015e"+
    "\1\u0163\13\u015e\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u015e\4\0\6\u015e\3\0\23\u015e\1\u0164\6\u015e"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u015e"+
    "\4\0\6\u015e\3\0\5\u015e\1\u0165\24\u015e\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u015e\4\0\6\u015e"+
    "\3\0\14\u015e\1\u0166\15\u015e\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u015e\4\0\6\u015e\3\0\15\u015e"+
    "\1\u0167\14\u015e\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u015e\4\0\6\u015e\3\0\16\u015e\1\u0168\13\u015e"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u015e"+
    "\4\0\6\u015e\3\0\15\u015e\1\u0169\14\u015e\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\3\u015e\1\u016a\4\u015e"+
    "\4\0\6\u015e\3\0\32\u015e\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u015e\4\0\6\u015e\3\0\3\u015e"+
    "\1\u016b\26\u015e\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u015e\4\0\6\u015e\3\0\15\u015e\1\u016c\14\u015e"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u016d"+
    "\4\0\6\u016d\3\0\32\u016d\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u016d\4\0\6\u016d\3\0\5\u016d"+
    "\1\u016e\24\u016d\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u016d\4\0\6\u016d\3\0\15\u016d\1\u016f\14\u016d"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u016d"+
    "\4\0\6\u016d\3\0\5\u016d\1\u0170\24\u016d\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u016d\4\0\6\u016d"+
    "\3\0\15\u016d\1\u0171\14\u016d\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u016d\4\0\6\u016d\3\0\11\u016d"+
    "\1\u0172\20\u016d\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u016d\4\0\6\u016d\3\0\22\u016d\1\u0173\7\u016d"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u016d"+
    "\4\0\4\u016d\1\u0174\1\u0175\3\0\32\u016d\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u016d\4\0\6\u016d"+
    "\3\0\15\u016d\1\u0176\14\u016d\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0177\4\0\6\u0177\3\0\32\u0177"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0177"+
    "\4\0\6\u0177\3\0\15\u0177\1\u0178\14\u0177\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u0177\4\0\6\u0177"+
    "\3\0\4\u0177\1\u0179\25\u0177\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0177\4\0\6\u0177\3\0\21\u0177"+
    "\1\u017a\10\u0177\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u0177\4\0\6\u0177\3\0\22\u0177\1\u017b\7\u0177"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0177"+
    "\4\0\6\u0177\3\0\16\u0177\1\u017c\13\u0177\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u017d\4\0\6\u017d"+
    "\3\0\32\u017d\3\0\3\122\4\0\1\122\2\0\1\122"+
    "\10\0\10\u017d\4\0\6\u017d\3\0\23\u017d\1\u017e\6\u017d"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u017d"+
    "\4\0\6\u017d\3\0\22\u017d\1\u017f\7\u017d\3\0\3\122"+
    "\4\0\1\122\2\0\1\122\10\0\10\u017d\4\0\6\u017d"+
    "\3\0\15\u017d\1\u0180\14\u017d\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0181\4\0\6\u0181\3\0\32\u0181"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0182"+
    "\4\0\6\u0182\3\0\32\u0182\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0183\4\0\6\u0183\3\0\32\u0183"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0184"+
    "\4\0\6\u0184\3\0\32\u0184\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0185\4\0\6\u0185\3\0\32\u0185"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0186"+
    "\4\0\6\u0186\3\0\32\u0186\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0187\4\0\6\u0187\3\0\32\u0187"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0188"+
    "\4\0\6\u0188\3\0\32\u0188\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0189\4\0\6\u0189\3\0\32\u0189"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u018a"+
    "\4\0\6\u018a\3\0\32\u018a\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u018b\4\0\6\u018b\3\0\32\u018b"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u018c"+
    "\4\0\6\u018c\3\0\32\u018c\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u018d\4\0\6\u018d\3\0\32\u018d"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u018e"+
    "\4\0\6\u018e\3\0\32\u018e\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u018f\4\0\6\u018f\3\0\32\u018f"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0190"+
    "\4\0\6\u0190\3\0\32\u0190\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0191\4\0\6\u0191\3\0\32\u0191"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0192"+
    "\4\0\6\u0192\3\0\32\u0192\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0193\4\0\6\u0193\3\0\32\u0193"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0194"+
    "\4\0\6\u0194\3\0\32\u0194\3\0\3\122\4\0\1\122"+
    "\2\0\1\122\10\0\10\u0195\4\0\6\u0195\3\0\32\u0195"+
    "\3\0\3\122\4\0\1\122\2\0\1\122\10\0\10\u0196"+
    "\4\0\6\u0196\3\0\32\u0196\3\0\1\122";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21045];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\6\1\2\11\4\1\1\11\7\1\1\11"+
    "\4\1\2\11\24\1\1\11\1\1\1\11\5\1\1\0"+
    "\10\1\1\0\1\1\1\11\76\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\0\74\1\2\0\313\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEXICO_5", yyline, yycolumn);
            }
            // fall through
          case 113: break;
          case 2:
            { return token(yytext(), "ERROR_LEXICO_1", yyline, yycolumn);
            }
            // fall through
          case 114: break;
          case 3:
            { /*Ignorar*/
            }
            // fall through
          case 115: break;
          case 4:
            { return token(yytext(), "diferente", yyline, yycolumn);
            }
            // fall through
          case 116: break;
          case 5:
            { return token(yytext(), "ERROR_LEXICO_7", yyline, yycolumn);
            }
            // fall through
          case 117: break;
          case 6:
            { return token(yytext(), "porcentaje", yyline, yycolumn);
            }
            // fall through
          case 118: break;
          case 7:
            { return token(yytext(), "and", yyline, yycolumn);
            }
            // fall through
          case 119: break;
          case 8:
            { return token(yytext(), "parentesisabre", yyline, yycolumn);
            }
            // fall through
          case 120: break;
          case 9:
            { return token(yytext(), "parentesiscierra", yyline, yycolumn);
            }
            // fall through
          case 121: break;
          case 10:
            { return token(yytext(), "asterisco", yyline, yycolumn);
            }
            // fall through
          case 122: break;
          case 11:
            { return token(yytext(), "mas", yyline, yycolumn);
            }
            // fall through
          case 123: break;
          case 12:
            { return token(yytext(), "coma", yyline, yycolumn);
            }
            // fall through
          case 124: break;
          case 13:
            { return token(yytext(), "menos", yyline, yycolumn);
            }
            // fall through
          case 125: break;
          case 14:
            { return token(yytext(), "punto", yyline, yycolumn);
            }
            // fall through
          case 126: break;
          case 15:
            { return token(yytext(), "diagonal", yyline, yycolumn);
            }
            // fall through
          case 127: break;
          case 16:
            { return token(yytext(), "numerobyte", yyline, yycolumn);
            }
            // fall through
          case 128: break;
          case 17:
            { return token(yytext(), "puntocoma", yyline, yycolumn);
            }
            // fall through
          case 129: break;
          case 18:
            { return token(yytext(), "menor", yyline, yycolumn);
            }
            // fall through
          case 130: break;
          case 19:
            { return token (yytext(), "igual", yyline, yycolumn);
            }
            // fall through
          case 131: break;
          case 20:
            { return token(yytext(), "mayor", yyline, yycolumn);
            }
            // fall through
          case 132: break;
          case 21:
            { return token(yytext(), "identificador", yyline, yycolumn);
            }
            // fall through
          case 133: break;
          case 22:
            { return token(yytext(), "corcheteabre", yyline, yycolumn);
            }
            // fall through
          case 134: break;
          case 23:
            { return token(yytext(), "corchetecierra", yyline, yycolumn);
            }
            // fall through
          case 135: break;
          case 24:
            { return token(yytext(), "potencia", yyline, yycolumn);
            }
            // fall through
          case 136: break;
          case 25:
            { return token(yytext(), "llaveabre", yyline, yycolumn);
            }
            // fall through
          case 137: break;
          case 26:
            { return token(yytext(), "or", yyline, yycolumn);
            }
            // fall through
          case 138: break;
          case 27:
            { return token(yytext(), "llavecierra", yyline, yycolumn);
            }
            // fall through
          case 139: break;
          case 28:
            { return token(yytext(), "ERROR_LEXICO_6", yyline, yycolumn);
            }
            // fall through
          case 140: break;
          case 29:
            { return token (yytext(), "asteriscoigual", yyline, yycolumn);
            }
            // fall through
          case 141: break;
          case 30:
            { return token(yytext(), "incremento", yyline, yycolumn);
            }
            // fall through
          case 142: break;
          case 31:
            { return token (yytext(), "sumarigual", yyline, yycolumn);
            }
            // fall through
          case 143: break;
          case 32:
            { return token(yytext(), "decremento", yyline, yycolumn);
            }
            // fall through
          case 144: break;
          case 33:
            { return token (yytext(), "menorigual", yyline, yycolumn);
            }
            // fall through
          case 145: break;
          case 34:
            { return token (yytext(), "diagonaligual", yyline, yycolumn);
            }
            // fall through
          case 146: break;
          case 35:
            { return token(yytext(), "ERROR_LEXICO_8", yyline, yycolumn);
            }
            // fall through
          case 147: break;
          case 36:
            { return token(yytext(), "ERROR_LEXICO_3", yyline, yycolumn);
            }
            // fall through
          case 148: break;
          case 37:
            { return token(yytext(), "menorigual", yyline, yycolumn);
            }
            // fall through
          case 149: break;
          case 38:
            { return token(yytext(), "dobleigual", yyline, yycolumn);
            }
            // fall through
          case 150: break;
          case 39:
            { return token(yytext(), "mayorigual", yyline, yycolumn);
            }
            // fall through
          case 151: break;
          case 40:
            { return token(yytext(), "ERROR_LEXICO_4", yyline, yycolumn);
            }
            // fall through
          case 152: break;
          case 41:
            { return token(yytext(), "if", yyline, yycolumn);
            }
            // fall through
          case 153: break;
          case 42:
            { return token(yytext(), "up", yyline, yycolumn);
            }
            // fall through
          case 154: break;
          case 43:
            { return token(yytext(), "ERROR_LEXICO_9", yyline, yycolumn);
            }
            // fall through
          case 155: break;
          case 44:
            { return token(yytext(), "string", yyline, yycolumn);
            }
            // fall through
          case 156: break;
          case 45:
            { return token(yytext(), "char", yyline, yycolumn);
            }
            // fall through
          case 157: break;
          case 46:
            { return token(yytext(), "numeroint", yyline, yycolumn);
            }
            // fall through
          case 158: break;
          case 47:
            { return token(yytext(), "add", yyline, yycolumn);
            }
            // fall through
          case 159: break;
          case 48:
            { return token(yytext(), "for", yyline, yycolumn);
            }
            // fall through
          case 160: break;
          case 49:
            { return token(yytext(), "int", yyline, yycolumn);
            }
            // fall through
          case 161: break;
          case 50:
            { return token(yytext(), "new", yyline, yycolumn);
            }
            // fall through
          case 162: break;
          case 51:
            { return token(yytext(), "pop", yyline, yycolumn);
            }
            // fall through
          case 163: break;
          case 52:
            { return token(yytext(), "set", yyline, yycolumn);
            }
            // fall through
          case 164: break;
          case 53:
            { return token(yytext(), "try", yyline, yycolumn);
            }
            // fall through
          case 165: break;
          case 54:
            { return token(yytext(), "byte", yyline, yycolumn);
            }
            // fall through
          case 166: break;
          case 55:
            { return token(yytext(), "case", yyline, yycolumn);
            }
            // fall through
          case 167: break;
          case 56:
            { return token(yytext(), "down", yyline, yycolumn);
            }
            // fall through
          case 168: break;
          case 57:
            { return token(yytext(), "else", yyline, yycolumn);
            }
            // fall through
          case 169: break;
          case 58:
            { return token(yytext(), "from", yyline, yycolumn);
            }
            // fall through
          case 170: break;
          case 59:
            { return token(yytext(), "left", yyline, yycolumn);
            }
            // fall through
          case 171: break;
          case 60:
            { return token(yytext(), "list", yyline, yycolumn);
            }
            // fall through
          case 172: break;
          case 61:
            { return token(yytext(), "null", yyline, yycolumn);
            }
            // fall through
          case 173: break;
          case 62:
            { return token(yytext(), "push", yyline, yycolumn);
            }
            // fall through
          case 174: break;
          case 63:
            { return token(yytext(), "show", yyline, yycolumn);
            }
            // fall through
          case 175: break;
          case 64:
            { return token(yytext(), "size", yyline, yycolumn);
            }
            // fall through
          case 176: break;
          case 65:
            { return token(yytext(), "this", yyline, yycolumn);
            }
            // fall through
          case 177: break;
          case 66:
            { return token(yytext(), "true", yyline, yycolumn);
            }
            // fall through
          case 178: break;
          case 67:
            { return token(yytext(), "ERROR_LEXICO_10", yyline, yycolumn);
            }
            // fall through
          case 179: break;
          case 68:
            { return token(yytext(), "begin", yyline, yycolumn);
            }
            // fall through
          case 180: break;
          case 69:
            { return token(yytext(), "break", yyline, yycolumn);
            }
            // fall through
          case 181: break;
          case 70:
            { return token(yytext(), "catch", yyline, yycolumn);
            }
            // fall through
          case 182: break;
          case 71:
            { return token(yytext(), "class", yyline, yycolumn);
            }
            // fall through
          case 183: break;
          case 72:
            { return token(yytext(), "false", yyline, yycolumn);
            }
            // fall through
          case 184: break;
          case 73:
            { return token(yytext(), "image", yyline, yycolumn);
            }
            // fall through
          case 185: break;
          case 74:
            { return token(yytext(), "level", yyline, yycolumn);
            }
            // fall through
          case 186: break;
          case 75:
            { return token(yytext(), "lifes", yyline, yycolumn);
            }
            // fall through
          case 187: break;
          case 76:
            { return token(yytext(), "music", yyline, yycolumn);
            }
            // fall through
          case 188: break;
          case 77:
            { return token(yytext(), "print", yyline, yycolumn);
            }
            // fall through
          case 189: break;
          case 78:
            { return token(yytext(), "queue", yyline, yycolumn);
            }
            // fall through
          case 190: break;
          case 79:
            { return token(yytext(), "right", yyline, yycolumn);
            }
            // fall through
          case 191: break;
          case 80:
            { return token(yytext(), "stack", yyline, yycolumn);
            }
            // fall through
          case 192: break;
          case 81:
            { return token(yytext(), "start", yyline, yycolumn);
            }
            // fall through
          case 193: break;
          case 82:
            { return token(yytext(), "while", yyline, yycolumn);
            }
            // fall through
          case 194: break;
          case 83:
            { return token(yytext(), "axol2D", yyline, yycolumn);
            }
            // fall through
          case 195: break;
          case 84:
            { return token(yytext(), "finish", yyline, yycolumn);
            }
            // fall through
          case 196: break;
          case 85:
            { return token(yytext(), "import", yyline, yycolumn);
            }
            // fall through
          case 197: break;
          case 86:
            { return token(yytext(), "method", yyline, yycolumn);
            }
            // fall through
          case 198: break;
          case 87:
            { return token(yytext(), "player", yyline, yycolumn);
            }
            // fall through
          case 199: break;
          case 88:
            { return token(yytext(), "random", yyline, yycolumn);
            }
            // fall through
          case 200: break;
          case 89:
            { return token(yytext(), "return", yyline, yycolumn);
            }
            // fall through
          case 201: break;
          case 90:
            { return token(yytext(), "rotate", yyline, yycolumn);
            }
            // fall through
          case 202: break;
          case 91:
            { return token(yytext(), "screen", yyline, yycolumn);
            }
            // fall through
          case 203: break;
          case 92:
            { return token(yytext(), "switch", yyline, yycolumn);
            }
            // fall through
          case 204: break;
          case 93:
            { return token(yytext(), "boolean", yyline, yycolumn);
            }
            // fall through
          case 205: break;
          case 94:
            { return token(yytext(), "dowhile", yyline, yycolumn);
            }
            // fall through
          case 206: break;
          case 95:
            { return token(yytext(), "enemies", yyline, yycolumn);
            }
            // fall through
          case 207: break;
          case 96:
            { return token(yytext(), "read_mg", yyline, yycolumn);
            }
            // fall through
          case 208: break;
          case 97:
            { return token(yytext(), "constant", yyline, yycolumn);
            }
            // fall through
          case 209: break;
          case 98:
            { return token(yytext(), "platform", yyline, yycolumn);
            }
            // fall through
          case 210: break;
          case 99:
            { return token(yytext(), "read_bin", yyline, yycolumn);
            }
            // fall through
          case 211: break;
          case 100:
            { return token(yytext(), "read_mp3", yyline, yycolumn);
            }
            // fall through
          case 212: break;
          case 101:
            { return token(yytext(), "read_tec", yyline, yycolumn);
            }
            // fall through
          case 213: break;
          case 102:
            { return token(yytext(), "save_bin", yyline, yycolumn);
            }
            // fall through
          case 214: break;
          case 103:
            { return token(yytext(), "obstacles", yyline, yycolumn);
            }
            // fall through
          case 215: break;
          case 104:
            { return token(yytext(), "positionX", yyline, yycolumn);
            }
            // fall through
          case 216: break;
          case 105:
            { return token(yytext(), "positionY", yyline, yycolumn);
            }
            // fall through
          case 217: break;
          case 106:
            { return token(yytext(), "print_con", yyline, yycolumn);
            }
            // fall through
          case 218: break;
          case 107:
            { return token(yytext(), "background", yyline, yycolumn);
            }
            // fall through
          case 219: break;
          case 108:
            { return token(yytext(), "dimensions", yyline, yycolumn);
            }
            // fall through
          case 220: break;
          case 109:
            { return token(yytext(), "backElement", yyline, yycolumn);
            }
            // fall through
          case 221: break;
          case 110:
            { return token(yytext(), "controllers", yyline, yycolumn);
            }
            // fall through
          case 222: break;
          case 111:
            { return token(yytext(), "getPosition", yyline, yycolumn);
            }
            // fall through
          case 223: break;
          case 112:
            { return token(yytext(), "ERROR_LEXICO_2", yyline, yycolumn);
            }
            // fall through
          case 224: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
