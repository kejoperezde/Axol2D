// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\1\0\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\3\27\1\0\1\30\1\31"+
    "\1\32\1\31\2\0\2\33\1\34\1\35\1\36\12\33"+
    "\1\37\7\33\2\40\1\33\1\12\1\0\1\12\1\7"+
    "\1\41\1\0\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\33\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\12\1\10\1\12\103\0"+
    "\1\33\7\0\1\33\3\0\1\33\3\0\1\33\1\0"+
    "\1\33\6\0\1\33\1\0\1\33\4\0\1\33\7\0"+
    "\1\33\3\0\1\33\3\0\1\33\1\0\1\33\6\0"+
    "\1\33\1\0\1\33\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\1\4\1\5\1\6\1\4\1\2"+
    "\1\7\2\6\1\10\2\6\3\11\1\10\1\12\1\13"+
    "\26\14\1\1\1\12\1\5\1\15\3\16\1\13\1\17"+
    "\1\20\1\0\1\3\1\13\1\21\2\11\1\22\26\14"+
    "\1\23\33\14\1\15\1\0\1\24\2\11\3\14\1\23"+
    "\53\14\1\24\2\0\1\3\2\11\10\14\1\23\32\14"+
    "\1\25\6\14\1\23\4\14\1\25\10\14\1\23\10\14"+
    "\1\23\20\14\1\23\20\14\1\23\13\14\1\23\3\14"+
    "\1\23\2\14\1\23\25\14\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\261\0\354\0\u0127\0\u0162"+
    "\0\u0162\0\u019d\0\166\0\u01d8\0\u0213\0\u0162\0\u024e\0\u0289"+
    "\0\u02c4\0\u02ff\0\u033a\0\166\0\354\0\354\0\u0375\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0162\0\u0162\0\u0887\0\73"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0162\0\u0162\0\u0162\0\u0973\0\u09ae"+
    "\0\166\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0ad5\0\u0fe7\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\166"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u170c"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u21a6\0\u21e1\0\u09e9"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u2257\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906"+
    "\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2257\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2a2d\0\u2b8f\0\u2bca\0\u2c05\0\u2c40"+
    "\0\u2a2d\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\u302b\0\u2fb5\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a"+
    "\0\u3365\0\u33a0\0\u33db\0\u33a0\0\u3416\0\u3451\0\u348c\0\u34c7"+
    "\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f"+
    "\0\u36da\0\u3715\0\u3750\0\u378b\0\u36da\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u38ed\0\u3a4f\0\u3a8a\0\u3ac5\0\u3a4f\0\u3b00\0\u3b3b\0\u3b3b"+
    "\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13"+
    "\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb"+
    "\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u4012";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\5\22\1\23\1\21\1\24\1\25\1\26\1\27"+
    "\1\30\1\27\1\31\3\27\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\27\1\41\1\27\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\27\1\54\3\27\2\2\4\0\1\2\2\0\1\2"+
    "\6\0\10\2\3\0\40\2\75\0\1\4\75\0\1\55"+
    "\1\0\2\55\2\0\4\55\12\0\1\55\1\56\40\0"+
    "\1\2\1\7\3\57\1\0\1\60\2\0\1\2\6\0"+
    "\10\7\3\0\40\7\5\0\1\55\1\0\2\55\2\0"+
    "\4\55\12\0\2\55\40\0\1\2\1\61\1\62\1\63"+
    "\1\62\1\0\1\2\2\0\1\2\6\0\10\61\3\0"+
    "\40\61\5\0\1\55\1\0\2\55\2\0\4\55\12\0"+
    "\1\55\1\64\45\0\1\55\1\0\2\55\2\0\1\55"+
    "\1\65\1\55\1\64\12\0\2\55\45\0\1\55\1\0"+
    "\2\55\2\0\3\55\1\66\12\0\1\55\1\64\53\0"+
    "\1\67\3\0\1\70\12\0\1\71\40\0\2\72\4\0"+
    "\1\72\2\0\1\72\6\0\10\73\3\0\42\72\4\0"+
    "\1\72\2\0\1\72\6\0\10\21\3\0\42\72\4\0"+
    "\1\72\2\0\1\72\6\0\5\21\1\74\2\73\3\0"+
    "\40\72\2\75\4\0\1\75\2\0\1\75\6\0\10\76"+
    "\3\0\40\76\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\76\3\0\24\76\1\77\13\76\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\76\3\0\23\76\1\100\14\76"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\76\3\0"+
    "\12\76\1\101\22\76\1\102\2\76\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\76\3\0\7\76\1\103\3\76"+
    "\1\104\10\76\1\105\2\76\1\106\6\76\1\107\1\76"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\76\3\0"+
    "\7\76\1\110\6\76\1\111\2\76\1\112\2\76\1\113"+
    "\13\76\2\75\4\0\1\75\2\0\1\75\6\0\10\76"+
    "\3\0\17\76\1\114\4\76\1\115\13\76\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\76\3\0\21\76\1\116"+
    "\1\76\1\100\14\76\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\76\3\0\7\76\1\117\7\76\1\120\4\76"+
    "\1\121\2\76\1\122\10\76\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\76\3\0\13\76\1\123\24\76\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\76\3\0\14\76"+
    "\1\124\5\76\1\125\1\126\14\76\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\76\3\0\13\76\1\127\3\76"+
    "\1\130\20\76\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\76\3\0\13\76\1\131\16\76\1\132\5\76\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\76\3\0\13\76"+
    "\1\133\16\76\1\134\5\76\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\76\3\0\10\76\1\135\27\76\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\76\3\0\21\76"+
    "\1\136\2\76\1\137\2\76\1\140\2\76\1\141\5\76"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\76\3\0"+
    "\32\76\1\142\5\76\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\76\3\0\7\76\1\143\3\76\1\144\3\76"+
    "\1\145\4\76\1\146\13\76\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\76\3\0\7\76\1\147\1\76\1\150"+
    "\1\76\1\126\2\76\1\151\1\152\11\76\1\153\2\76"+
    "\1\154\3\76\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\76\3\0\16\76\1\155\10\76\1\156\10\76\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\76\3\0\25\76"+
    "\1\124\12\76\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\76\3\0\16\76\1\157\21\76\1\0\4\57\1\0"+
    "\1\160\11\0\10\57\3\0\40\57\2\2\4\0\1\2"+
    "\2\0\1\60\6\0\10\2\3\0\40\2\11\0\1\160"+
    "\63\0\1\62\6\0\1\160\61\0\13\161\1\162\57\161"+
    "\2\70\1\4\1\5\67\70\2\72\4\0\1\72\2\0"+
    "\1\72\6\0\10\72\3\0\42\72\4\0\1\72\2\0"+
    "\1\72\6\0\10\163\3\0\42\72\4\0\1\72\2\0"+
    "\1\72\6\0\5\73\1\164\2\163\3\0\40\72\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\75\3\0\42\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\165\3\0\40\165"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\165\3\0"+
    "\23\165\1\166\14\165\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\165\3\0\13\165\1\167\24\165\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\165\3\0\12\165\1\170"+
    "\25\165\2\75\4\0\1\75\2\0\1\75\6\0\10\165"+
    "\3\0\24\165\1\171\13\165\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\165\3\0\11\165\1\172\26\165\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\165\3\0\15\165"+
    "\1\173\22\165\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\165\3\0\24\165\1\174\13\165\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\165\3\0\13\165\1\175\24\165"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\165\3\0"+
    "\31\165\1\176\6\165\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\165\3\0\30\165\1\176\1\177\6\165\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\165\3\0\7\165"+
    "\1\200\30\165\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\165\3\0\7\165\1\201\30\165\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\165\3\0\23\165\1\202\14\165"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\165\3\0"+
    "\22\165\1\203\15\165\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\165\3\0\34\165\1\204\3\165\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\165\3\0\30\165\1\176"+
    "\7\165\2\75\4\0\1\75\2\0\1\75\6\0\10\165"+
    "\3\0\21\165\1\205\16\165\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\165\3\0\23\165\1\206\14\165\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\165\3\0\27\165"+
    "\1\170\10\165\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\165\3\0\24\165\1\207\13\165\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\165\3\0\31\165\1\210\6\165"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\165\3\0"+
    "\7\165\1\211\15\165\1\212\12\165\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\165\3\0\31\165\1\170\6\165"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\165\3\0"+
    "\14\165\1\213\16\165\1\214\4\165\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\165\3\0\14\165\1\215\13\165"+
    "\1\213\7\165\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\165\3\0\31\165\1\216\6\165\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\165\3\0\30\165\1\217\7\165"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\165\3\0"+
    "\34\165\1\170\3\165\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\165\3\0\21\165\1\220\16\165\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\165\3\0\30\165\1\221"+
    "\7\165\2\75\4\0\1\75\2\0\1\75\6\0\10\165"+
    "\3\0\7\165\1\222\30\165\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\165\3\0\25\165\1\170\2\165\1\223"+
    "\7\165\2\75\4\0\1\75\2\0\1\75\6\0\10\165"+
    "\3\0\17\165\1\224\20\165\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\165\3\0\30\165\1\225\7\165\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\165\3\0\13\165"+
    "\1\226\24\165\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\165\3\0\23\165\1\227\14\165\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\165\3\0\7\165\1\230\21\165"+
    "\1\231\6\165\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\165\3\0\15\165\1\232\22\165\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\165\3\0\31\165\1\233\6\165"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\165\3\0"+
    "\33\165\1\234\4\165\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\165\3\0\27\165\1\235\10\165\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\165\3\0\24\165\1\236"+
    "\13\165\2\75\4\0\1\75\2\0\1\75\6\0\10\165"+
    "\3\0\37\165\1\176\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\165\3\0\7\165\1\237\30\165\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\165\3\0\17\165\1\240"+
    "\20\165\2\75\4\0\1\75\2\0\1\75\6\0\10\165"+
    "\3\0\17\165\1\241\20\165\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\165\3\0\32\165\1\242\3\165\1\170"+
    "\1\165\2\75\4\0\1\75\2\0\1\75\6\0\10\165"+
    "\3\0\17\165\1\243\20\165\13\161\1\244\57\161\13\245"+
    "\1\246\3\245\1\247\53\245\2\72\4\0\1\72\2\0"+
    "\1\72\6\0\10\250\3\0\42\72\4\0\1\72\2\0"+
    "\1\72\6\0\3\163\1\251\4\250\3\0\40\72\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\252\3\0\40\252"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\252\3\0"+
    "\31\252\1\253\6\252\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\252\3\0\22\252\1\254\15\252\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\252\3\0\21\252\1\255"+
    "\16\252\2\75\4\0\1\75\2\0\1\75\6\0\10\252"+
    "\3\0\20\252\1\256\17\252\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\252\3\0\17\252\1\257\20\252\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\252\3\0\21\252"+
    "\1\260\16\252\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\252\3\0\7\252\1\261\30\252\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\252\3\0\13\252\1\262\24\252"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\252\3\0"+
    "\11\252\1\263\26\252\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\252\3\0\27\252\1\262\10\252\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\252\3\0\30\252\1\264"+
    "\7\252\2\75\4\0\1\75\2\0\1\75\6\0\10\252"+
    "\3\0\30\252\1\265\7\252\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\252\3\0\13\252\1\266\24\252\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\252\3\0\16\252"+
    "\1\267\4\252\1\262\14\252\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\252\3\0\30\252\1\270\7\252\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\252\3\0\17\252"+
    "\1\271\20\252\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\252\3\0\22\252\1\262\15\252\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\252\3\0\4\252\1\272\33\252"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\252\3\0"+
    "\15\252\1\273\22\252\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\252\3\0\24\252\1\274\13\252\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\252\3\0\31\252\1\262"+
    "\6\252\2\75\4\0\1\75\2\0\1\75\6\0\10\252"+
    "\3\0\13\252\1\275\24\252\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\252\3\0\13\252\1\264\24\252\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\252\3\0\16\252"+
    "\1\276\21\252\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\252\3\0\17\252\1\277\20\252\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\252\3\0\21\252\1\262\16\252"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\252\3\0"+
    "\31\252\1\300\6\252\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\252\3\0\31\252\1\301\4\252\1\302\1\252"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\252\3\0"+
    "\17\252\1\303\20\252\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\252\3\0\23\252\1\304\14\252\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\252\3\0\16\252\1\262"+
    "\21\252\2\75\4\0\1\75\2\0\1\75\6\0\10\252"+
    "\3\0\32\252\1\273\5\252\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\252\3\0\12\252\1\305\25\252\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\252\3\0\12\252"+
    "\1\306\25\252\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\252\3\0\32\252\1\307\5\252\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\252\3\0\16\252\1\310\21\252"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\252\3\0"+
    "\7\252\1\311\30\252\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\252\3\0\13\252\1\312\24\252\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\252\3\0\13\252\1\313"+
    "\24\252\2\75\4\0\1\75\2\0\1\75\6\0\10\252"+
    "\3\0\34\252\1\262\3\252\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\252\3\0\11\252\1\261\15\252\1\310"+
    "\10\252\2\75\4\0\1\75\2\0\1\75\6\0\10\252"+
    "\3\0\31\252\1\314\6\252\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\252\3\0\30\252\1\262\7\252\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\252\3\0\13\252"+
    "\1\315\24\252\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\252\3\0\21\252\1\273\16\252\13\245\1\246\3\245"+
    "\1\4\66\245\1\246\57\245\2\72\4\0\1\72\2\0"+
    "\1\72\6\0\5\250\3\72\3\0\40\72\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\316\3\0\40\316\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\316\3\0\27\316"+
    "\1\317\10\316\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\316\3\0\17\316\1\320\20\316\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\2\316\1\321\5\316\3\0\40\316"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\316\3\0"+
    "\3\316\1\322\11\316\1\323\22\316\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\316\3\0\23\316\1\324\14\316"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\316\3\0"+
    "\13\316\1\325\24\316\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\316\3\0\20\316\1\324\17\316\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\316\3\0\16\316\1\324"+
    "\21\316\2\75\4\0\1\75\2\0\1\75\6\0\10\316"+
    "\3\0\30\316\1\324\7\316\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\316\3\0\31\316\1\326\6\316\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\316\3\0\23\316"+
    "\1\327\14\316\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\316\3\0\17\316\1\330\20\316\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\316\3\0\13\316\1\331\24\316"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\316\3\0"+
    "\30\316\1\332\7\316\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\316\3\0\24\316\1\333\13\316\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\316\3\0\13\316\1\324"+
    "\24\316\2\75\4\0\1\75\2\0\1\75\6\0\10\316"+
    "\3\0\27\316\1\334\10\316\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\316\3\0\21\316\1\324\16\316\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\316\3\0\24\316"+
    "\1\335\13\316\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\316\3\0\11\316\1\324\26\316\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\316\3\0\7\316\1\336\30\316"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\316\3\0"+
    "\14\316\1\337\23\316\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\316\3\0\13\316\1\340\24\316\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\316\3\0\31\316\1\341"+
    "\6\316\2\75\4\0\1\75\2\0\1\75\6\0\10\316"+
    "\3\0\31\316\1\342\6\316\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\316\3\0\24\316\1\343\13\316\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\316\3\0\6\316"+
    "\1\344\31\316\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\316\3\0\27\316\1\345\10\316\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\316\3\0\31\316\1\324\6\316"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\316\3\0"+
    "\31\316\1\346\6\316\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\316\3\0\6\316\1\347\31\316\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\316\3\0\13\316\1\345"+
    "\24\316\2\75\4\0\1\75\2\0\1\75\6\0\10\316"+
    "\3\0\11\316\1\332\26\316\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\350\3\0\40\350\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\350\3\0\24\350\1\351\13\350"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\350\3\0"+
    "\13\350\1\352\24\350\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\350\3\0\2\350\1\353\35\350\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\350\3\0\21\350\1\354"+
    "\16\350\2\75\4\0\1\75\2\0\1\75\6\0\10\350"+
    "\3\0\27\350\1\355\10\350\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\350\3\0\7\350\1\356\30\350\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\350\3\0\7\350"+
    "\1\357\30\350\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\350\3\0\30\350\1\360\7\350\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\350\3\0\21\350\1\361\16\350"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\350\3\0"+
    "\16\350\1\353\21\350\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\350\3\0\30\350\1\362\7\350\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\350\3\0\31\350\1\353"+
    "\6\350\2\75\4\0\1\75\2\0\1\75\6\0\10\350"+
    "\3\0\12\350\1\353\25\350\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\350\3\0\11\350\1\363\26\350\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\350\3\0\24\350"+
    "\1\364\13\350\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\350\3\0\27\350\1\353\10\350\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\350\3\0\17\350\1\365\20\350"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\350\3\0"+
    "\6\350\1\366\31\350\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\350\3\0\22\350\1\353\15\350\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\350\3\0\10\350\1\367"+
    "\11\350\1\370\6\350\1\371\6\350\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\350\3\0\23\350\1\353\14\350"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\350\3\0"+
    "\13\350\1\353\24\350\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\350\3\0\10\350\1\367\27\350\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\372\3\0\40\372\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\372\3\0\21\372"+
    "\1\373\16\372\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\372\3\0\30\372\1\374\7\372\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\372\3\0\13\372\1\375\24\372"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\372\3\0"+
    "\24\372\1\376\13\372\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\372\3\0\23\372\1\374\14\372\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\372\3\0\23\372\1\377"+
    "\14\372\2\75\4\0\1\75\2\0\1\75\6\0\10\372"+
    "\3\0\17\372\1\u0100\20\372\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\372\3\0\13\372\1\374\24\372\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\372\3\0\17\372"+
    "\1\u0101\20\372\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\372\3\0\21\372\1\u0102\16\372\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\372\3\0\27\372\1\u0103\10\372"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\372\3\0"+
    "\24\372\1\u0104\13\372\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\372\3\0\11\372\1\u0105\26\372\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\372\3\0\17\372\1\u0106"+
    "\20\372\2\75\4\0\1\75\2\0\1\75\6\0\10\372"+
    "\3\0\15\372\1\374\7\372\1\u0107\12\372\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\372\3\0\13\372\1\u0108"+
    "\24\372\2\75\4\0\1\75\2\0\1\75\6\0\10\u0109"+
    "\3\0\40\u0109\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\u0109\3\0\21\u0109\1\u010a\16\u0109\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\u0109\3\0\22\u0109\1\u010b\15\u0109"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\u0109\3\0"+
    "\32\u0109\1\u010c\5\u0109\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\u0109\3\0\31\u0109\1\u010d\6\u0109\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\u0109\3\0\24\u0109\1\u010e"+
    "\13\u0109\2\75\4\0\1\75\2\0\1\75\6\0\10\u0109"+
    "\3\0\31\u0109\1\u010f\6\u0109\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\u0109\3\0\13\u0109\1\u0110\24\u0109\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\u0109\3\0\22\u0109"+
    "\1\u010d\15\u0109\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\u0109\3\0\23\u0109\1\u0111\14\u0109\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\u0109\3\0\24\u0109\1\u0112\13\u0109"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\u0109\3\0"+
    "\23\u0109\1\u010d\14\u0109\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\3\u0109\1\u010d\4\u0109\3\0\40\u0109\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\u0109\3\0\11\u0109\1\u010d"+
    "\26\u0109\2\75\4\0\1\75\2\0\1\75\6\0\10\u0113"+
    "\3\0\40\u0113\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\u0113\3\0\13\u0113\1\u0114\24\u0113\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\u0113\3\0\13\u0113\1\u0115\24\u0113"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\u0113\3\0"+
    "\23\u0113\1\u0116\14\u0113\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\u0113\3\0\23\u0113\1\u0117\14\u0113\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\u0113\3\0\17\u0113\1\u0118"+
    "\20\u0113\2\75\4\0\1\75\2\0\1\75\6\0\10\u0113"+
    "\3\0\30\u0113\1\u0119\7\u0113\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\u0113\3\0\5\u0113\1\u0119\32\u0113\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\u0113\3\0\23\u0113"+
    "\1\u0119\14\u0113\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\u011a\3\0\40\u011a\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\u011a\3\0\27\u011a\1\u011b\10\u011a\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\u011a\3\0\23\u011a\1\u011c"+
    "\14\u011a\2\75\4\0\1\75\2\0\1\75\6\0\10\u011a"+
    "\3\0\12\u011a\1\u011d\25\u011a\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\u011a\3\0\30\u011a\1\u011d\7\u011a\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\u011a\3\0\24\u011a"+
    "\1\u011e\13\u011a\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\u011f\3\0\40\u011f\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\u011f\3\0\30\u011f\1\u0120\7\u011f\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\u011f\3\0\31\u011f\1\u0120"+
    "\6\u011f\2\75\4\0\1\75\2\0\1\75\6\0\10\u011f"+
    "\3\0\23\u011f\1\u0120\14\u011f\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\u0121\3\0\40\u0121\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\u0122\3\0\40\u0122\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\u0123\3\0\40\u0123\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\u0124\3\0\40\u0124"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\u0125\3\0"+
    "\40\u0125\2\75\4\0\1\75\2\0\1\75\6\0\10\u0126"+
    "\3\0\40\u0126\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\u0127\3\0\40\u0127\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\u0128\3\0\40\u0128\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\u0129\3\0\40\u0129\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\u012a\3\0\40\u012a\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\u012b\3\0\40\u012b\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\u012c\3\0\40\u012c"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\u012d\3\0"+
    "\40\u012d\2\75\4\0\1\75\2\0\1\75\6\0\10\u012e"+
    "\3\0\40\u012e\2\75\4\0\1\75\2\0\1\75\6\0"+
    "\10\u012f\3\0\40\u012f\2\75\4\0\1\75\2\0\1\75"+
    "\6\0\10\u0130\3\0\40\u0130\2\75\4\0\1\75\2\0"+
    "\1\75\6\0\10\u0131\3\0\40\u0131\2\75\4\0\1\75"+
    "\2\0\1\75\6\0\10\u0132\3\0\40\u0132\2\75\4\0"+
    "\1\75\2\0\1\75\6\0\10\u0133\3\0\40\u0133\2\75"+
    "\4\0\1\75\2\0\1\75\6\0\10\u0134\3\0\40\u0134"+
    "\2\75\4\0\1\75\2\0\1\75\6\0\10\u0135\3\0"+
    "\40\u0135\2\75\4\0\1\75\2\0\1\75\6\0\10\u0136"+
    "\3\0\40\u0136";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16461];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\6\1\1\11\10\1\1\11\42\1\1\0"+
    "\1\1\1\11\66\1\1\11\1\0\63\1\2\0\220\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEXICO_5", yyline, yycolumn);
            }
            // fall through
          case 23: break;
          case 2:
            { return token(yytext(), "ERROR_LEXICO_1", yyline, yycolumn);
            }
            // fall through
          case 24: break;
          case 3:
            { /*Ignorar*/
            }
            // fall through
          case 25: break;
          case 4:
            { return token(yytext(), "OP_LOGICO", yyline, yycolumn);
            }
            // fall through
          case 26: break;
          case 5:
            { return token(yytext(), "ERROR_LEXICO_7", yyline, yycolumn);
            }
            // fall through
          case 27: break;
          case 6:
            { return token(yytext(), "OP_ARITMETICO", yyline, yycolumn);
            }
            // fall through
          case 28: break;
          case 7:
            { return token(yytext(), "DELIMITADOR", yyline, yycolumn);
            }
            // fall through
          case 29: break;
          case 8:
            { return token(yytext(), "SEPARADOR", yyline, yycolumn);
            }
            // fall through
          case 30: break;
          case 9:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 31: break;
          case 10:
            { return token(yytext(), "OP_COMPARA", yyline, yycolumn);
            }
            // fall through
          case 32: break;
          case 11:
            { return token (yytext(), "OP_ASIG", yyline, yycolumn);
            }
            // fall through
          case 33: break;
          case 12:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 34: break;
          case 13:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 35: break;
          case 14:
            { return token(yytext(), "ERROR_LEXICO_6", yyline, yycolumn);
            }
            // fall through
          case 36: break;
          case 15:
            { return token(yytext(), "OP_INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 37: break;
          case 16:
            { return token(yytext(), "OP_DECREMENTO", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 17:
            { return token(yytext(), "ERROR_LEXICO_3", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 18:
            { return token(yytext(), "ERROR_LEXICO_4", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 19:
            { return token(yytext(), "PALABRA_RES", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 20:
            { return token(yytext(), "ERROR_LEXICO_8", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 21:
            { return token(yytext(), "BOOLEANO", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 22:
            { return token(yytext(), "ERROR_LEXICO_2", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
